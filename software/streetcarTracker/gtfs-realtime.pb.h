/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_TRANSIT_REALTIME_GTFS_REALTIME_PB_H_INCLUDED
#define PB_TRANSIT_REALTIME_GTFS_REALTIME_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Determines whether the current fetch is incremental.  Currently,
 DIFFERENTIAL mode is unsupported and behavior is unspecified for feeds
 that use this mode.  There are discussions on the GTFS Realtime mailing
 list around fully specifying the behavior of DIFFERENTIAL mode and the
 documentation will be updated when those discussions are finalized. */
typedef enum _transit_realtime_FeedHeader_Incrementality {
    transit_realtime_FeedHeader_Incrementality_FULL_DATASET = 0,
    transit_realtime_FeedHeader_Incrementality_DIFFERENTIAL = 1
} transit_realtime_FeedHeader_Incrementality;

/* The relation between the StopTimeEvents and the static schedule. */
typedef enum _transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship {
    /* The vehicle is proceeding in accordance with its static schedule of
 stops, although not necessarily according to the times of the schedule.
 At least one of arrival and departure must be provided. If the schedule
 for this stop contains both arrival and departure times then so must
 this update. Frequency-based trips (GTFS frequencies.txt with exact_times = 0)
 should not have a SCHEDULED value and should use UNSCHEDULED instead. */
    transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship_SCHEDULED = 0,
    /* The stop is skipped, i.e., the vehicle will not stop at this stop.
 Arrival and departure are optional. */
    transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship_SKIPPED = 1,
    /* No StopTimeEvents are given for this stop.
 The main intention for this value is to give time predictions only for
 part of a trip, i.e., if the last update for a trip has a NO_DATA
 specifier, then StopTimeEvents for the rest of the stops in the trip
 are considered to be unspecified as well.
 Neither arrival nor departure should be supplied. */
    transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship_NO_DATA = 2,
    /* The vehicle is operating a trip defined in GTFS frequencies.txt with exact_times = 0.
 This value should not be used for trips that are not defined in GTFS frequencies.txt,
 or trips in GTFS frequencies.txt with exact_times = 1. Trips containing StopTimeUpdates
 with ScheduleRelationship=UNSCHEDULED must also set TripDescriptor.ScheduleRelationship=UNSCHEDULED.
 NOTE: This field is still experimental, and subject to change. It may be
 formally adopted in the future. */
    transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship_UNSCHEDULED = 3
} transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship;

typedef enum _transit_realtime_VehiclePosition_VehicleStopStatus {
    /* The vehicle is just about to arrive at the stop (on a stop
 display, the vehicle symbol typically flashes). */
    transit_realtime_VehiclePosition_VehicleStopStatus_INCOMING_AT = 0,
    /* The vehicle is standing at the stop. */
    transit_realtime_VehiclePosition_VehicleStopStatus_STOPPED_AT = 1,
    /* The vehicle has departed and is in transit to the next stop. */
    transit_realtime_VehiclePosition_VehicleStopStatus_IN_TRANSIT_TO = 2
} transit_realtime_VehiclePosition_VehicleStopStatus;

/* Congestion level that is affecting this vehicle. */
typedef enum _transit_realtime_VehiclePosition_CongestionLevel {
    transit_realtime_VehiclePosition_CongestionLevel_UNKNOWN_CONGESTION_LEVEL = 0,
    transit_realtime_VehiclePosition_CongestionLevel_RUNNING_SMOOTHLY = 1,
    transit_realtime_VehiclePosition_CongestionLevel_STOP_AND_GO = 2,
    transit_realtime_VehiclePosition_CongestionLevel_CONGESTION = 3,
    transit_realtime_VehiclePosition_CongestionLevel_SEVERE_CONGESTION = 4 /* People leaving their cars. */
} transit_realtime_VehiclePosition_CongestionLevel;

/* The state of passenger occupancy for the vehicle or carriage.
 Individual producers may not publish all OccupancyStatus values. Therefore, consumers
 must not assume that the OccupancyStatus values follow a linear scale.
 Consumers should represent OccupancyStatus values as the state indicated 
 and intended by the producer. Likewise, producers must use OccupancyStatus values that
 correspond to actual vehicle occupancy states.
 For describing passenger occupancy levels on a linear scale, see `occupancy_percentage`.
 This field is still experimental, and subject to change. It may be formally adopted in the future. */
typedef enum _transit_realtime_VehiclePosition_OccupancyStatus {
    /* The vehicle or carriage is considered empty by most measures, and has few or no
 passengers onboard, but is still accepting passengers. */
    transit_realtime_VehiclePosition_OccupancyStatus_EMPTY = 0,
    /* The vehicle or carriage has a large number of seats available.
 The amount of free seats out of the total seats available to be
 considered large enough to fall into this category is determined at the
 discretion of the producer. */
    transit_realtime_VehiclePosition_OccupancyStatus_MANY_SEATS_AVAILABLE = 1,
    /* The vehicle or carriage has a relatively small number of seats available.
 The amount of free seats out of the total seats available to be
 considered small enough to fall into this category is determined at the
 discretion of the feed producer. */
    transit_realtime_VehiclePosition_OccupancyStatus_FEW_SEATS_AVAILABLE = 2,
    /* The vehicle or carriage can currently accommodate only standing passengers. */
    transit_realtime_VehiclePosition_OccupancyStatus_STANDING_ROOM_ONLY = 3,
    /* The vehicle or carriage can currently accommodate only standing passengers
 and has limited space for them. */
    transit_realtime_VehiclePosition_OccupancyStatus_CRUSHED_STANDING_ROOM_ONLY = 4,
    /* The vehicle or carriage is considered full by most measures, but may still be
 allowing passengers to board. */
    transit_realtime_VehiclePosition_OccupancyStatus_FULL = 5,
    /* The vehicle or carriage is not accepting passengers, but usually accepts passengers for boarding. */
    transit_realtime_VehiclePosition_OccupancyStatus_NOT_ACCEPTING_PASSENGERS = 6,
    /* The vehicle or carriage doesn't have any occupancy data available at that time. */
    transit_realtime_VehiclePosition_OccupancyStatus_NO_DATA_AVAILABLE = 7,
    /* The vehicle or carriage is not boardable and never accepts passengers.
 Useful for special vehicles or carriages (engine, maintenance carriage, etcâ€¦). */
    transit_realtime_VehiclePosition_OccupancyStatus_NOT_BOARDABLE = 8
} transit_realtime_VehiclePosition_OccupancyStatus;

/* Cause of this alert. If cause_detail is included, then Cause must also be included. */
typedef enum _transit_realtime_Alert_Cause {
    transit_realtime_Alert_Cause_UNKNOWN_CAUSE = 1,
    transit_realtime_Alert_Cause_OTHER_CAUSE = 2, /* Not machine-representable. */
    transit_realtime_Alert_Cause_TECHNICAL_PROBLEM = 3,
    transit_realtime_Alert_Cause_STRIKE = 4, /* Public transit agency employees stopped working. */
    transit_realtime_Alert_Cause_DEMONSTRATION = 5, /* People are blocking the streets. */
    transit_realtime_Alert_Cause_ACCIDENT = 6,
    transit_realtime_Alert_Cause_HOLIDAY = 7,
    transit_realtime_Alert_Cause_WEATHER = 8,
    transit_realtime_Alert_Cause_MAINTENANCE = 9,
    transit_realtime_Alert_Cause_CONSTRUCTION = 10,
    transit_realtime_Alert_Cause_POLICE_ACTIVITY = 11,
    transit_realtime_Alert_Cause_MEDICAL_EMERGENCY = 12
} transit_realtime_Alert_Cause;

/* What is the effect of this problem on the affected entity. If effect_detail is included, then Effect must also be included. */
typedef enum _transit_realtime_Alert_Effect {
    transit_realtime_Alert_Effect_NO_SERVICE = 1,
    transit_realtime_Alert_Effect_REDUCED_SERVICE = 2,
    /* We don't care about INsignificant delays: they are hard to detect, have
 little impact on the user, and would clutter the results as they are too
 frequent. */
    transit_realtime_Alert_Effect_SIGNIFICANT_DELAYS = 3,
    transit_realtime_Alert_Effect_DETOUR = 4,
    transit_realtime_Alert_Effect_ADDITIONAL_SERVICE = 5,
    transit_realtime_Alert_Effect_MODIFIED_SERVICE = 6,
    transit_realtime_Alert_Effect_OTHER_EFFECT = 7,
    transit_realtime_Alert_Effect_UNKNOWN_EFFECT = 8,
    transit_realtime_Alert_Effect_STOP_MOVED = 9,
    transit_realtime_Alert_Effect_NO_EFFECT = 10,
    transit_realtime_Alert_Effect_ACCESSIBILITY_ISSUE = 11
} transit_realtime_Alert_Effect;

/* Severity of this alert. */
typedef enum _transit_realtime_Alert_SeverityLevel {
    transit_realtime_Alert_SeverityLevel_UNKNOWN_SEVERITY = 1,
    transit_realtime_Alert_SeverityLevel_INFO = 2,
    transit_realtime_Alert_SeverityLevel_WARNING = 3,
    transit_realtime_Alert_SeverityLevel_SEVERE = 4
} transit_realtime_Alert_SeverityLevel;

/* The relation between this trip and the static schedule. If a trip is done
 in accordance with temporary schedule, not reflected in GTFS, then it
 shouldn't be marked as SCHEDULED, but likely as ADDED. */
typedef enum _transit_realtime_TripDescriptor_ScheduleRelationship {
    /* Trip that is running in accordance with its GTFS schedule, or is close
 enough to the scheduled trip to be associated with it. */
    transit_realtime_TripDescriptor_ScheduleRelationship_SCHEDULED = 0,
    /* An extra trip that was added in addition to a running schedule, for
 example, to replace a broken vehicle or to respond to sudden passenger
 load.
 NOTE: Currently, behavior is unspecified for feeds that use this mode. There are discussions on the GTFS GitHub
 [(1)](https://github.com/google/transit/issues/106) [(2)](https://github.com/google/transit/pull/221)
 [(3)](https://github.com/google/transit/pull/219) around fully specifying or deprecating ADDED trips and the
 documentation will be updated when those discussions are finalized. */
    transit_realtime_TripDescriptor_ScheduleRelationship_ADDED = 1,
    /* A trip that is running with no schedule associated to it (GTFS frequencies.txt exact_times=0).
 Trips with ScheduleRelationship=UNSCHEDULED must also set all StopTimeUpdates.ScheduleRelationship=UNSCHEDULED. */
    transit_realtime_TripDescriptor_ScheduleRelationship_UNSCHEDULED = 2,
    /* A trip that existed in the schedule but was removed. */
    transit_realtime_TripDescriptor_ScheduleRelationship_CANCELED = 3,
    /* Should not be used - for backwards-compatibility only. */
    transit_realtime_TripDescriptor_ScheduleRelationship_REPLACEMENT = 5,
    /* An extra trip that was added in addition to a running schedule, for example, to replace a broken vehicle or to
 respond to sudden passenger load. Used with TripUpdate.TripProperties.trip_id, TripUpdate.TripProperties.start_date,
 and TripUpdate.TripProperties.start_time to copy an existing trip from static GTFS but start at a different service
 date and/or time. Duplicating a trip is allowed if the service related to the original trip in (CSV) GTFS
 (in calendar.txt or calendar_dates.txt) is operating within the next 30 days. The trip to be duplicated is
 identified via TripUpdate.TripDescriptor.trip_id. This enumeration does not modify the existing trip referenced by
 TripUpdate.TripDescriptor.trip_id - if a producer wants to cancel the original trip, it must publish a separate
 TripUpdate with the value of CANCELED or DELETED. Trips defined in GTFS frequencies.txt with exact_times that is
 empty or equal to 0 cannot be duplicated. The VehiclePosition.TripDescriptor.trip_id for the new trip must contain
 the matching value from TripUpdate.TripProperties.trip_id and VehiclePosition.TripDescriptor.ScheduleRelationship
 must also be set to DUPLICATED.
 Existing producers and consumers that were using the ADDED enumeration to represent duplicated trips must follow
 the migration guide (https://github.com/google/transit/tree/master/gtfs-realtime/spec/en/examples/migration-duplicated.md)
 to transition to the DUPLICATED enumeration.
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    transit_realtime_TripDescriptor_ScheduleRelationship_DUPLICATED = 6,
    /* A trip that existed in the schedule but was removed and must not be shown to users.
 DELETED should be used instead of CANCELED to indicate that a transit provider would like to entirely remove
 information about the corresponding trip from consuming applications, so the trip is not shown as cancelled to
 riders, e.g. a trip that is entirely being replaced by another trip.
 This designation becomes particularly important if several trips are cancelled and replaced with substitute service.
 If consumers were to show explicit information about the cancellations it would distract from the more important
 real-time predictions.
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    transit_realtime_TripDescriptor_ScheduleRelationship_DELETED = 7
} transit_realtime_TripDescriptor_ScheduleRelationship;

typedef enum _transit_realtime_VehicleDescriptor_WheelchairAccessible {
    /* The trip doesn't have information about wheelchair accessibility.
 This is the **default** behavior. If the static GTFS contains a
 _wheelchair_accessible_ value, it won't be overwritten. */
    transit_realtime_VehicleDescriptor_WheelchairAccessible_NO_VALUE = 0,
    /* The trip has no accessibility value present.
 This value will overwrite the value from the GTFS. */
    transit_realtime_VehicleDescriptor_WheelchairAccessible_UNKNOWN = 1,
    /* The trip is wheelchair accessible.
 This value will overwrite the value from the GTFS. */
    transit_realtime_VehicleDescriptor_WheelchairAccessible_WHEELCHAIR_ACCESSIBLE = 2,
    /* The trip is **not** wheelchair accessible.
 This value will overwrite the value from the GTFS. */
    transit_realtime_VehicleDescriptor_WheelchairAccessible_WHEELCHAIR_INACCESSIBLE = 3
} transit_realtime_VehicleDescriptor_WheelchairAccessible;

typedef enum _transit_realtime_Stop_WheelchairBoarding {
    transit_realtime_Stop_WheelchairBoarding_UNKNOWN = 0,
    transit_realtime_Stop_WheelchairBoarding_AVAILABLE = 1,
    transit_realtime_Stop_WheelchairBoarding_NOT_AVAILABLE = 2
} transit_realtime_Stop_WheelchairBoarding;

/* Struct definitions */
/* Metadata about a feed, included in feed messages. */
typedef struct _transit_realtime_FeedHeader {
    /* Version of the feed specification.
 The current version is 2.0.  Valid versions are "2.0", "1.0". */
    pb_callback_t gtfs_realtime_version;
    bool has_incrementality;
    transit_realtime_FeedHeader_Incrementality incrementality;
    /* This timestamp identifies the moment when the content of this feed has been
 created (in server time). In POSIX time (i.e., number of seconds since
 January 1st 1970 00:00:00 UTC). */
    bool has_timestamp;
    uint64_t timestamp;
    /* String that matches the feed_info.feed_version from the GTFS feed that the real
 time data is based on. Consumers can use this to identify which GTFS feed is
 currently active or when a new one is available to download. */
    pb_callback_t feed_version;
    pb_extension_t *extensions;
} transit_realtime_FeedHeader;

/* The contents of a feed message.
 A feed is a continuous stream of feed messages. Each message in the stream is
 obtained as a response to an appropriate HTTP GET request.
 A realtime feed is always defined with relation to an existing GTFS feed.
 All the entity ids are resolved with respect to the GTFS feed.
 Note that "required" and "optional" as stated in this file refer to Protocol
 Buffer cardinality, not semantic cardinality.  See reference.md at
 https://github.com/google/transit/tree/master/gtfs-realtime for field
 semantic cardinality. */
typedef struct _transit_realtime_FeedMessage {
    /* Metadata about this feed and feed message. */
    transit_realtime_FeedHeader header;
    /* Contents of the feed. */
    pb_callback_t entity;
    pb_extension_t *extensions;
} transit_realtime_FeedMessage;

/* Timing information for a single predicted event (either arrival or
 departure).
 Timing consists of delay and/or estimated time, and uncertainty.
 - delay should be used when the prediction is given relative to some
   existing schedule in GTFS.
 - time should be given whether there is a predicted schedule or not. If
   both time and delay are specified, time will take precedence
   (although normally, time, if given for a scheduled trip, should be
   equal to scheduled time in GTFS + delay).

 Uncertainty applies equally to both time and delay.
 The uncertainty roughly specifies the expected error in true delay (but
 note, we don't yet define its precise statistical meaning). It's possible
 for the uncertainty to be 0, for example for trains that are driven under
 computer timing control. */
typedef struct _transit_realtime_TripUpdate_StopTimeEvent {
    /* Delay (in seconds) can be positive (meaning that the vehicle is late) or
 negative (meaning that the vehicle is ahead of schedule). Delay of 0
 means that the vehicle is exactly on time. */
    bool has_delay;
    int32_t delay;
    /* Event as absolute time.
 In Unix time (i.e., number of seconds since January 1st 1970 00:00:00
 UTC). */
    bool has_time;
    int64_t time;
    /* If uncertainty is omitted, it is interpreted as unknown.
 If the prediction is unknown or too uncertain, the delay (or time) field
 should be empty. In such case, the uncertainty field is ignored.
 To specify a completely certain prediction, set its uncertainty to 0. */
    bool has_uncertainty;
    int32_t uncertainty;
    pb_extension_t *extensions;
} transit_realtime_TripUpdate_StopTimeEvent;

/* Provides the updated values for the stop time.
 NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future. */
typedef struct _transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties {
    /* Supports real-time stop assignments. Refers to a stop_id defined in the GTFS stops.txt.
 The new assigned_stop_id should not result in a significantly different trip experience for the end user than
 the stop_id defined in GTFS stop_times.txt. In other words, the end user should not view this new stop_id as an
 "unusual change" if the new stop was presented within an app without any additional context.
 For example, this field is intended to be used for platform assignments by using a stop_id that belongs to the
 same station as the stop originally defined in GTFS stop_times.txt.
 To assign a stop without providing any real-time arrival or departure predictions, populate this field and set
 StopTimeUpdate.schedule_relationship = NO_DATA.
 If this field is populated, it is preferred to omit `StopTimeUpdate.stop_id` and use only `StopTimeUpdate.stop_sequence`. If
 `StopTimeProperties.assigned_stop_id` and `StopTimeUpdate.stop_id` are populated, `StopTimeUpdate.stop_id` must match `assigned_stop_id`.
 Platform assignments should be reflected in other GTFS-realtime fields as well
 (e.g., `VehiclePosition.stop_id`).
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    pb_callback_t assigned_stop_id;
    pb_extension_t *extensions;
} transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties;

/* Realtime update for arrival and/or departure events for a given stop on a
 trip. Updates can be supplied for both past and future events.
 The producer is allowed, although not required, to drop past events. */
typedef struct _transit_realtime_TripUpdate_StopTimeUpdate { /* The update is linked to a specific stop either through stop_sequence or
 stop_id, so one of the fields below must necessarily be set.
 See the documentation in TripDescriptor for more information. */
    /* Must be the same as in stop_times.txt in the corresponding GTFS feed. */
    bool has_stop_sequence;
    uint32_t stop_sequence;
    bool has_arrival;
    transit_realtime_TripUpdate_StopTimeEvent arrival;
    bool has_departure;
    transit_realtime_TripUpdate_StopTimeEvent departure;
    /* Must be the same as in stops.txt in the corresponding GTFS feed. */
    pb_callback_t stop_id;
    bool has_schedule_relationship;
    transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship schedule_relationship;
    /* Realtime updates for certain properties defined within GTFS stop_times.txt
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    bool has_stop_time_properties;
    transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties stop_time_properties;
    /* Expected occupancy after departure from the given stop.
 Should be provided only for future stops.
 In order to provide departure_occupancy_status without either arrival or
 departure StopTimeEvents, ScheduleRelationship should be set to NO_DATA. */
    bool has_departure_occupancy_status;
    transit_realtime_VehiclePosition_OccupancyStatus departure_occupancy_status;
    pb_extension_t *extensions;
} transit_realtime_TripUpdate_StopTimeUpdate;

/* Defines updated properties of the trip, such as a new shape_id when there is a detour. Or defines the
 trip_id, start_date, and start_time of a DUPLICATED trip. 
 NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future. */
typedef struct _transit_realtime_TripUpdate_TripProperties {
    /* Defines the identifier of a new trip that is a duplicate of an existing trip defined in (CSV) GTFS trips.txt
 but will start at a different service date and/or time (defined using the TripProperties.start_date and
 TripProperties.start_time fields). See definition of trips.trip_id in (CSV) GTFS. Its value must be different
 than the ones used in the (CSV) GTFS. Required if schedule_relationship=DUPLICATED, otherwise this field must not
 be populated and will be ignored by consumers.
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    pb_callback_t trip_id;
    /* Service date on which the DUPLICATED trip will be run, in YYYYMMDD format. Required if
 schedule_relationship=DUPLICATED, otherwise this field must not be populated and will be ignored by consumers.
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    pb_callback_t start_date;
    /* Defines the departure start time of the trip when itâ€™s duplicated. See definition of stop_times.departure_time
 in (CSV) GTFS. Scheduled arrival and departure times for the duplicated trip are calculated based on the offset
 between the original trip departure_time and this field. For example, if a GTFS trip has stop A with a
 departure_time of 10:00:00 and stop B with departure_time of 10:01:00, and this field is populated with the value
 of 10:30:00, stop B on the duplicated trip will have a scheduled departure_time of 10:31:00. Real-time prediction
 delay values are applied to this calculated schedule time to determine the predicted time. For example, if a
 departure delay of 30 is provided for stop B, then the predicted departure time is 10:31:30. Real-time
 prediction time values do not have any offset applied to them and indicate the predicted time as provided.
 For example, if a departure time representing 10:31:30 is provided for stop B, then the predicted departure time
 is 10:31:30. This field is required if schedule_relationship is DUPLICATED, otherwise this field must not be
 populated and will be ignored by consumers.
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    pb_callback_t start_time;
    /* Specifies the shape of the vehicle travel path when the trip shape differs from the shape specified in
 (CSV) GTFS or to specify it in real-time when it's not provided by (CSV) GTFS, such as a vehicle that takes differing
 paths based on rider demand. See definition of trips.shape_id in (CSV) GTFS. If a shape is neither defined in (CSV) GTFS
 nor in real-time, the shape is considered unknown. This field can refer to a shape defined in the (CSV) GTFS in shapes.txt
 or a Shape in the (protobuf) real-time feed. The order of stops (stop sequences) for this trip must remain the same as
 (CSV) GTFS. Stops that are a part of the original trip but will no longer be made, such as when a detour occurs, should
 be marked as schedule_relationship=SKIPPED.
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    pb_callback_t shape_id;
    pb_extension_t *extensions;
} transit_realtime_TripUpdate_TripProperties;

/* Carriage specific details, used for vehicles composed of several carriages
 This message/field is still experimental, and subject to change. It may be formally adopted in the future. */
typedef struct _transit_realtime_VehiclePosition_CarriageDetails {
    /* Identification of the carriage. Should be unique per vehicle. */
    pb_callback_t id;
    /* User visible label that may be shown to the passenger to help identify
 the carriage. Example: "7712", "Car ABC-32", etc...
 This message/field is still experimental, and subject to change. It may be formally adopted in the future. */
    pb_callback_t label;
    /* Occupancy status for this given carriage, in this vehicle
 This message/field is still experimental, and subject to change. It may be formally adopted in the future. */
    bool has_occupancy_status;
    transit_realtime_VehiclePosition_OccupancyStatus occupancy_status;
    /* Occupancy percentage for this given carriage, in this vehicle.
 Follows the same rules as "VehiclePosition.occupancy_percentage"
 -1 in case data is not available for this given carriage (as protobuf defaults to 0 otherwise)
 This message/field is still experimental, and subject to change. It may be formally adopted in the future. */
    bool has_occupancy_percentage;
    int32_t occupancy_percentage;
    /* Identifies the order of this carriage with respect to the other
 carriages in the vehicle's list of CarriageDetails.
 The first carriage in the direction of travel must have a value of 1.
 The second value corresponds to the second carriage in the direction
 of travel and must have a value of 2, and so forth.
 For example, the first carriage in the direction of travel has a value of 1.
 If the second carriage in the direction of travel has a value of 3,
 consumers will discard data for all carriages (i.e., the multi_carriage_details field).
 Carriages without data must be represented with a valid carriage_sequence number and the fields 
 without data should be omitted (alternately, those fields could also be included and set to the "no data" values).
 This message/field is still experimental, and subject to change. It may be formally adopted in the future. */
    bool has_carriage_sequence;
    uint32_t carriage_sequence;
    pb_extension_t *extensions;
} transit_realtime_VehiclePosition_CarriageDetails;

/* A time interval. The interval is considered active at time 't' if 't' is
 greater than or equal to the start time and less than the end time. */
typedef struct _transit_realtime_TimeRange {
    /* Start time, in POSIX time (i.e., number of seconds since January 1st 1970
 00:00:00 UTC).
 If missing, the interval starts at minus infinity. */
    bool has_start;
    uint64_t start;
    /* End time, in POSIX time (i.e., number of seconds since January 1st 1970
 00:00:00 UTC).
 If missing, the interval ends at plus infinity. */
    bool has_end;
    uint64_t end;
    pb_extension_t *extensions;
} transit_realtime_TimeRange;

/* A position. */
typedef struct _transit_realtime_Position {
    /* Degrees North, in the WGS-84 coordinate system. */
    float latitude;
    /* Degrees East, in the WGS-84 coordinate system. */
    float longitude;
    /* Bearing, in degrees, clockwise from North, i.e., 0 is North and 90 is East.
 This can be the compass bearing, or the direction towards the next stop
 or intermediate location.
 This should not be direction deduced from the sequence of previous
 positions, which can be computed from previous data. */
    bool has_bearing;
    float bearing;
    /* Odometer value, in meters. */
    bool has_odometer;
    double odometer;
    /* Momentary speed measured by the vehicle, in meters per second. */
    bool has_speed;
    float speed;
    pb_extension_t *extensions;
} transit_realtime_Position;

typedef struct _transit_realtime_TripDescriptor_ModifiedTripSelector {
    /* The 'id' from the FeedEntity in which the contained TripModifications object affects this trip. */
    pb_callback_t modifications_id;
    /* The trip_id from the GTFS feed that is modified by the modifications_id */
    pb_callback_t affected_trip_id;
    /* The initially scheduled start time of this trip instance, applied to the frequency based modified trip. Same definition as start_time in TripDescriptor. */
    pb_callback_t start_time;
    /* The start date of this trip instance in YYYYMMDD format, applied to the modified trip. Same definition as start_date in TripDescriptor. */
    pb_callback_t start_date;
    pb_extension_t *extensions;
} transit_realtime_TripDescriptor_ModifiedTripSelector;

/* A descriptor that identifies an instance of a GTFS trip, or all instances of
 a trip along a route.
 - To specify a single trip instance, the trip_id (and if necessary,
   start_time) is set. If route_id is also set, then it should be same as one
   that the given trip corresponds to.
 - To specify all the trips along a given route, only the route_id should be
   set. Note that if the trip_id is not known, then stop sequence ids in
   TripUpdate are not sufficient, and stop_ids must be provided as well. In
   addition, absolute arrival/departure times must be provided. */
typedef struct _transit_realtime_TripDescriptor {
    /* The trip_id from the GTFS feed that this selector refers to.
 For non frequency-based trips, this field is enough to uniquely identify
 the trip. For frequency-based trip, start_time and start_date might also be
 necessary. When schedule_relationship is DUPLICATED within a TripUpdate, the trip_id identifies the trip from
 static GTFS to be duplicated. When schedule_relationship is DUPLICATED within a VehiclePosition, the trip_id
 identifies the new duplicate trip and must contain the value for the corresponding TripUpdate.TripProperties.trip_id. */
    pb_callback_t trip_id;
    /* The initially scheduled start time of this trip instance.
 When the trip_id corresponds to a non-frequency-based trip, this field
 should either be omitted or be equal to the value in the GTFS feed. When
 the trip_id correponds to a frequency-based trip, the start_time must be
 specified for trip updates and vehicle positions. If the trip corresponds
 to exact_times=1 GTFS record, then start_time must be some multiple
 (including zero) of headway_secs later than frequencies.txt start_time for
 the corresponding time period. If the trip corresponds to exact_times=0,
 then its start_time may be arbitrary, and is initially expected to be the
 first departure of the trip. Once established, the start_time of this
 frequency-based trip should be considered immutable, even if the first
 departure time changes -- that time change may instead be reflected in a
 StopTimeUpdate.
 Format and semantics of the field is same as that of
 GTFS/frequencies.txt/start_time, e.g., 11:15:35 or 25:15:35. */
    pb_callback_t start_time;
    /* The scheduled start date of this trip instance.
 Must be provided to disambiguate trips that are so late as to collide with
 a scheduled trip on a next day. For example, for a train that departs 8:00
 and 20:00 every day, and is 12 hours late, there would be two distinct
 trips on the same time.
 This field can be provided but is not mandatory for schedules in which such
 collisions are impossible - for example, a service running on hourly
 schedule where a vehicle that is one hour late is not considered to be
 related to schedule anymore.
 In YYYYMMDD format. */
    pb_callback_t start_date;
    bool has_schedule_relationship;
    transit_realtime_TripDescriptor_ScheduleRelationship schedule_relationship;
    /* The route_id from the GTFS that this selector refers to. */
    pb_callback_t route_id;
    /* The direction_id from the GTFS feed trips.txt file, indicating the
 direction of travel for trips this selector refers to. */
    bool has_direction_id;
    uint32_t direction_id;
    /* Linkage to any modifications done to this trip (shape changes, removal or addition of stops). 
 If this field is provided, the `trip_id`, `route_id`, `direction_id`, `start_time`, `start_date` fields of the `TripDescriptor` MUST be left empty, to avoid confusion by consumers that aren't looking for the `ModifiedTripSelector` value. */
    bool has_modified_trip;
    transit_realtime_TripDescriptor_ModifiedTripSelector modified_trip;
    pb_extension_t *extensions;
} transit_realtime_TripDescriptor;

/* Identification information for the vehicle performing the trip. */
typedef struct _transit_realtime_VehicleDescriptor {
    /* Internal system identification of the vehicle. Should be unique per
 vehicle, and can be used for tracking the vehicle as it proceeds through
 the system. */
    pb_callback_t id;
    /* User visible label, i.e., something that must be shown to the passenger to
 help identify the correct vehicle. */
    pb_callback_t label;
    /* The license plate of the vehicle. */
    pb_callback_t license_plate;
    bool has_wheelchair_accessible;
    transit_realtime_VehicleDescriptor_WheelchairAccessible wheelchair_accessible;
    pb_extension_t *extensions;
} transit_realtime_VehicleDescriptor;

/* Realtime update of the progress of a vehicle along a trip.
 Depending on the value of ScheduleRelationship, a TripUpdate can specify:
 - A trip that proceeds along the schedule.
 - A trip that proceeds along a route but has no fixed schedule.
 - A trip that have been added or removed with regard to schedule.

 The updates can be for future, predicted arrival/departure events, or for
 past events that already occurred.
 Normally, updates should get more precise and more certain (see
 uncertainty below) as the events gets closer to current time.
 Even if that is not possible, the information for past events should be
 precise and certain. In particular, if an update points to time in the past
 but its update's uncertainty is not 0, the client should conclude that the
 update is a (wrong) prediction and that the trip has not completed yet.

 Note that the update can describe a trip that is already completed.
 To this end, it is enough to provide an update for the last stop of the trip.
 If the time of that is in the past, the client will conclude from that that
 the whole trip is in the past (it is possible, although inconsequential, to
 also provide updates for preceding stops).
 This option is most relevant for a trip that has completed ahead of schedule,
 but according to the schedule, the trip is still proceeding at the current
 time. Removing the updates for this trip could make the client assume
 that the trip is still proceeding.
 Note that the feed provider is allowed, but not required, to purge past
 updates - this is one case where this would be practically useful. */
typedef struct _transit_realtime_TripUpdate {
    /* The Trip that this message applies to. There can be at most one
 TripUpdate entity for each actual trip instance.
 If there is none, that means there is no prediction information available.
 It does *not* mean that the trip is progressing according to schedule. */
    transit_realtime_TripDescriptor trip;
    /* Updates to StopTimes for the trip (both future, i.e., predictions, and in
 some cases, past ones, i.e., those that already happened).
 The updates must be sorted by stop_sequence, and apply for all the
 following stops of the trip up to the next specified one.

 Example 1:
 For a trip with 20 stops, a StopTimeUpdate with arrival delay and departure
 delay of 0 for stop_sequence of the current stop means that the trip is
 exactly on time.

 Example 2:
 For the same trip instance, 3 StopTimeUpdates are provided:
 - delay of 5 min for stop_sequence 3
 - delay of 1 min for stop_sequence 8
 - delay of unspecified duration for stop_sequence 10
 This will be interpreted as:
 - stop_sequences 3,4,5,6,7 have delay of 5 min.
 - stop_sequences 8,9 have delay of 1 min.
 - stop_sequences 10,... have unknown delay. */
    pb_callback_t stop_time_update;
    /* Additional information on the vehicle that is serving this trip. */
    bool has_vehicle;
    transit_realtime_VehicleDescriptor vehicle;
    /* The most recent moment at which the vehicle's real-time progress was measured
 to estimate StopTimes in the future. When StopTimes in the past are provided,
 arrival/departure times may be earlier than this value. In POSIX
 time (i.e., the number of seconds since January 1st 1970 00:00:00 UTC). */
    bool has_timestamp;
    uint64_t timestamp;
    /* The current schedule deviation for the trip.  Delay should only be
 specified when the prediction is given relative to some existing schedule
 in GTFS.

 Delay (in seconds) can be positive (meaning that the vehicle is late) or
 negative (meaning that the vehicle is ahead of schedule). Delay of 0
 means that the vehicle is exactly on time.

 Delay information in StopTimeUpdates take precedent of trip-level delay
 information, such that trip-level delay is only propagated until the next
 stop along the trip with a StopTimeUpdate delay value specified.

 Feed providers are strongly encouraged to provide a TripUpdate.timestamp
 value indicating when the delay value was last updated, in order to
 evaluate the freshness of the data.

 NOTE: This field is still experimental, and subject to change. It may be
 formally adopted in the future. */
    bool has_delay;
    int32_t delay;
    bool has_trip_properties;
    transit_realtime_TripUpdate_TripProperties trip_properties;
    pb_extension_t *extensions;
} transit_realtime_TripUpdate;

/* Realtime positioning information for a given vehicle. */
typedef struct _transit_realtime_VehiclePosition {
    /* The Trip that this vehicle is serving.
 Can be empty or partial if the vehicle can not be identified with a given
 trip instance. */
    bool has_trip;
    transit_realtime_TripDescriptor trip;
    /* Current position of this vehicle. */
    bool has_position;
    transit_realtime_Position position;
    /* The stop sequence index of the current stop. The meaning of
 current_stop_sequence (i.e., the stop that it refers to) is determined by
 current_status.
 If current_status is missing IN_TRANSIT_TO is assumed. */
    bool has_current_stop_sequence;
    uint32_t current_stop_sequence;
    /* The exact status of the vehicle with respect to the current stop.
 Ignored if current_stop_sequence is missing. */
    bool has_current_status;
    transit_realtime_VehiclePosition_VehicleStopStatus current_status;
    /* Moment at which the vehicle's position was measured. In POSIX time
 (i.e., number of seconds since January 1st 1970 00:00:00 UTC). */
    bool has_timestamp;
    uint64_t timestamp;
    bool has_congestion_level;
    transit_realtime_VehiclePosition_CongestionLevel congestion_level;
    /* Identifies the current stop. The value must be the same as in stops.txt in
 the corresponding GTFS feed. */
    pb_callback_t stop_id;
    /* Additional information on the vehicle that is serving this trip. */
    bool has_vehicle;
    transit_realtime_VehicleDescriptor vehicle;
    /* If multi_carriage_status is populated with per-carriage OccupancyStatus,
 then this field should describe the entire vehicle with all carriages accepting passengers considered. */
    bool has_occupancy_status;
    transit_realtime_VehiclePosition_OccupancyStatus occupancy_status;
    /* A percentage value indicating the degree of passenger occupancy in the vehicle.
 The values are represented as an integer without decimals. 0 means 0% and 100 means 100%.
 The value 100 should represent the total maximum occupancy the vehicle was designed for,
 including both seated and standing capacity, and current operating regulations allow.
 The value may exceed 100 if there are more passengers than the maximum designed capacity.
 The precision of occupancy_percentage should be low enough that individual passengers cannot be tracked boarding or alighting the vehicle.
 If multi_carriage_status is populated with per-carriage occupancy_percentage, 
 then this field should describe the entire vehicle with all carriages accepting passengers considered.
 This field is still experimental, and subject to change. It may be formally adopted in the future. */
    bool has_occupancy_percentage;
    uint32_t occupancy_percentage;
    /* Details of the multiple carriages of this given vehicle.
 The first occurrence represents the first carriage of the vehicle, 
 given the current direction of travel. 
 The number of occurrences of the multi_carriage_details 
 field represents the number of carriages of the vehicle.
 It also includes non boardable carriages, 
 like engines, maintenance carriages, etcâ€¦ as they provide valuable 
 information to passengers about where to stand on a platform.
 This message/field is still experimental, and subject to change. It may be formally adopted in the future. */
    pb_callback_t multi_carriage_details;
    pb_extension_t *extensions;
} transit_realtime_VehiclePosition;

/* A selector for an entity in a GTFS feed. */
typedef struct _transit_realtime_EntitySelector {
    /* The values of the fields should correspond to the appropriate fields in the
 GTFS feed.
 At least one specifier must be given. If several are given, then the
 matching has to apply to all the given specifiers. */
    pb_callback_t agency_id;
    pb_callback_t route_id;
    /* corresponds to route_type in GTFS. */
    bool has_route_type;
    int32_t route_type;
    bool has_trip;
    transit_realtime_TripDescriptor trip;
    pb_callback_t stop_id;
    /* Corresponds to trip direction_id in GTFS trips.txt. If provided the
 route_id must also be provided. */
    bool has_direction_id;
    uint32_t direction_id;
    pb_extension_t *extensions;
} transit_realtime_EntitySelector;

/* An internationalized message containing per-language versions of a snippet of
 text or a URL.
 One of the strings from a message will be picked up. The resolution proceeds
 as follows:
 1. If the UI language matches the language code of a translation,
    the first matching translation is picked.
 2. If a default UI language (e.g., English) matches the language code of a
    translation, the first matching translation is picked.
 3. If some translation has an unspecified language code, that translation is
    picked. */
typedef struct _transit_realtime_TranslatedString {
    /* At least one translation must be provided. */
    pb_callback_t translation;
    pb_extension_t *extensions;
} transit_realtime_TranslatedString;

typedef struct _transit_realtime_TranslatedString_Translation {
    /* A UTF-8 string containing the message. */
    pb_callback_t text;
    /* BCP-47 language code. Can be omitted if the language is unknown or if
 no i18n is done at all for the feed. At most one translation is
 allowed to have an unspecified language tag. */
    pb_callback_t language;
    pb_extension_t *extensions;
} transit_realtime_TranslatedString_Translation;

/* An internationalized image containing per-language versions of a URL linking to an image
 along with meta information
 Only one of the images from a message will be retained by consumers. The resolution proceeds
 as follows:
 1. If the UI language matches the language code of a translation,
    the first matching translation is picked.
 2. If a default UI language (e.g., English) matches the language code of a
    translation, the first matching translation is picked.
 3. If some translation has an unspecified language code, that translation is
    picked.
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
typedef struct _transit_realtime_TranslatedImage {
    /* At least one localized image must be provided. */
    pb_callback_t localized_image;
    pb_extension_t *extensions;
} transit_realtime_TranslatedImage;

/* An alert, indicating some sort of incident in the public transit network. */
typedef struct _transit_realtime_Alert {
    /* Time when the alert should be shown to the user. If missing, the
 alert will be shown as long as it appears in the feed.
 If multiple ranges are given, the alert will be shown during all of them. */
    pb_callback_t active_period;
    /* Entities whose users we should notify of this alert. */
    pb_callback_t informed_entity;
    bool has_cause;
    transit_realtime_Alert_Cause cause;
    bool has_effect;
    transit_realtime_Alert_Effect effect;
    /* The URL which provides additional information about the alert. */
    bool has_url;
    transit_realtime_TranslatedString url;
    /* Alert header. Contains a short summary of the alert text as plain-text. */
    bool has_header_text;
    transit_realtime_TranslatedString header_text;
    /* Full description for the alert as plain-text. The information in the
 description should add to the information of the header. */
    bool has_description_text;
    transit_realtime_TranslatedString description_text;
    /* Text for alert header to be used in text-to-speech implementations. This field is the text-to-speech version of header_text. */
    bool has_tts_header_text;
    transit_realtime_TranslatedString tts_header_text;
    /* Text for full description for the alert to be used in text-to-speech implementations. This field is the text-to-speech version of description_text. */
    bool has_tts_description_text;
    transit_realtime_TranslatedString tts_description_text;
    bool has_severity_level;
    transit_realtime_Alert_SeverityLevel severity_level;
    /* TranslatedImage to be displayed along the alert text. Used to explain visually the alert effect of a detour, station closure, etc. The image must enhance the understanding of the alert. Any essential information communicated within the image must also be contained in the alert text.
 The following types of images are discouraged : image containing mainly text, marketing or branded images that add no additional information. 
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    bool has_image;
    transit_realtime_TranslatedImage image;
    /* Text describing the appearance of the linked image in the `image` field (e.g., in case the image can't be displayed
 or the user can't see the image for accessibility reasons). See the HTML spec for alt image text - https://html.spec.whatwg.org/#alt.
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    bool has_image_alternative_text;
    transit_realtime_TranslatedString image_alternative_text;
    /* Description of the cause of the alert that allows for agency-specific language; more specific than the Cause. If cause_detail is included, then Cause must also be included.
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    bool has_cause_detail;
    transit_realtime_TranslatedString cause_detail;
    /* Description of the effect of the alert that allows for agency-specific language; more specific than the Effect. If effect_detail is included, then Effect must also be included.
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    bool has_effect_detail;
    transit_realtime_TranslatedString effect_detail;
    pb_extension_t *extensions;
} transit_realtime_Alert;

typedef struct _transit_realtime_TranslatedImage_LocalizedImage {
    /* String containing an URL linking to an image
 The image linked must be less than 2MB. 
 If an image changes in a significant enough way that an update is required on the consumer side, the producer must update the URL to a new one.
 The URL should be a fully qualified URL that includes http:// or https://, and any special characters in the URL must be correctly escaped. See the followingÂ http://www.w3.org/Addressing/URL/4_URI_Recommentations.htmlÂ for a description of how to create fully qualified URL values. */
    pb_callback_t url;
    /* IANA media type as to specify the type of image to be displayed. 
 The type must start with "image/" */
    pb_callback_t media_type;
    /* BCP-47 language code. Can be omitted if the language is unknown or if
 no i18n is done at all for the feed. At most one translation is
 allowed to have an unspecified language tag. */
    pb_callback_t language;
    pb_extension_t *extensions;
} transit_realtime_TranslatedImage_LocalizedImage;

/* Describes the physical path that a vehicle takes when it's not part of the (CSV) GTFS,
 such as for a detour. Shapes belong to Trips, and consist of a sequence of shape points.
 Tracing the points in order provides the path of the vehicle.  Shapes do not need to intercept
 the location of Stops exactly, but all Stops on a trip should lie within a small distance of
 the shape for that trip, i.e. close to straight line segments connecting the shape points
 NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future. */
typedef struct _transit_realtime_Shape {
    /* Identifier of the shape. Must be different than any shape_id defined in the (CSV) GTFS.
 This field is required as per reference.md, but needs to be specified here optional because "Required is Forever"
 See https://developers.google.com/protocol-buffers/docs/proto#specifying_field_rules
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    pb_callback_t shape_id;
    /* Encoded polyline representation of the shape. This polyline must contain at least two points.
 For more information about encoded polylines, see https://developers.google.com/maps/documentation/utilities/polylinealgorithm
 This field is required as per reference.md, but needs to be specified here optional because "Required is Forever"
 See https://developers.google.com/protocol-buffers/docs/proto#specifying_field_rules
 NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    pb_callback_t encoded_polyline;
    pb_extension_t *extensions;
} transit_realtime_Shape;

/* Describes a stop which is served by trips. All fields are as described in the GTFS-Static specification.
 NOTE: This message is still experimental, and subject to change. It may be formally adopted in the future. */
typedef struct _transit_realtime_Stop {
    pb_callback_t stop_id;
    bool has_stop_code;
    transit_realtime_TranslatedString stop_code;
    bool has_stop_name;
    transit_realtime_TranslatedString stop_name;
    bool has_tts_stop_name;
    transit_realtime_TranslatedString tts_stop_name;
    bool has_stop_desc;
    transit_realtime_TranslatedString stop_desc;
    bool has_stop_lat;
    float stop_lat;
    bool has_stop_lon;
    float stop_lon;
    pb_callback_t zone_id;
    bool has_stop_url;
    transit_realtime_TranslatedString stop_url;
    pb_callback_t parent_station;
    pb_callback_t stop_timezone;
    bool has_wheelchair_boarding;
    transit_realtime_Stop_WheelchairBoarding wheelchair_boarding;
    pb_callback_t level_id;
    bool has_platform_code;
    transit_realtime_TranslatedString platform_code;
    pb_extension_t *extensions;
} transit_realtime_Stop;

/* NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
typedef struct _transit_realtime_TripModifications {
    /* A list of selected trips affected by this TripModifications. */
    pb_callback_t selected_trips;
    /* A list of start times in the real-time trip descriptor for the trip_id defined in trip_ids. 
 Useful to target multiple departures of a trip_id in a frequency-based trip. */
    pb_callback_t start_times;
    /* Dates on which the modifications occurs, in the YYYYMMDD format. Producers SHOULD only transmit detours occurring within the next week.
 The dates provided should not be used as user-facing information, if a user-facing start and end date needs to be provided, they can be provided in the linked service alert with `service_alert_id` */
    pb_callback_t service_dates;
    /* A list of modifications to apply to the affected trips. */
    pb_callback_t modifications;
    pb_extension_t *extensions;
} transit_realtime_TripModifications;

/* A definition (or update) of an entity in the transit feed. */
typedef struct _transit_realtime_FeedEntity {
    /* The ids are used only to provide incrementality support. The id should be
 unique within a FeedMessage. Consequent FeedMessages may contain
 FeedEntities with the same id. In case of a DIFFERENTIAL update the new
 FeedEntity with some id will replace the old FeedEntity with the same id
 (or delete it - see is_deleted below).
 The actual GTFS entities (e.g. stations, routes, trips) referenced by the
 feed must be specified by explicit selectors (see EntitySelector below for
 more info). */
    pb_callback_t id;
    /* Whether this entity is to be deleted. Relevant only for incremental
 fetches. */
    bool has_is_deleted;
    bool is_deleted;
    /* Data about the entity itself. Exactly one of the following fields must be
 present (unless the entity is being deleted). */
    bool has_trip_update;
    transit_realtime_TripUpdate trip_update;
    bool has_vehicle;
    transit_realtime_VehiclePosition vehicle;
    bool has_alert;
    transit_realtime_Alert alert;
    /* NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
    bool has_shape;
    transit_realtime_Shape shape;
    bool has_stop;
    transit_realtime_Stop stop;
    bool has_trip_modifications;
    transit_realtime_TripModifications trip_modifications;
    pb_extension_t *extensions;
} transit_realtime_FeedEntity;

typedef struct _transit_realtime_TripModifications_SelectedTrips {
    /* A list of trips affected with this replacement that all have the same new `shape_id`. */
    pb_callback_t trip_ids;
    /* The ID of the new shape for the modified trips in this SelectedTrips.
 May refer to a new shape added using a GTFS-RT Shape message, or to an existing shape defined in the GTFS-Static feedâ€™s shapes.txt. */
    pb_callback_t shape_id;
    pb_extension_t *extensions;
} transit_realtime_TripModifications_SelectedTrips;

/* NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future.
 Select a stop by stop sequence or by stop_id. At least one of the two values must be provided. */
typedef struct _transit_realtime_StopSelector {
    /* Must be the same as in stop_times.txt in the corresponding GTFS feed. */
    bool has_stop_sequence;
    uint32_t stop_sequence;
    /* Must be the same as in stops.txt in the corresponding GTFS feed. */
    pb_callback_t stop_id;
    pb_extension_t *extensions;
} transit_realtime_StopSelector;

/* A `Modification` message replaces a span of n stop times from each affected trip starting at `start_stop_selector`. */
typedef struct _transit_realtime_TripModifications_Modification {
    /* The stop selector of the first stop_time of the original trip that is to be affected by this modification.
 Used in conjuction with `end_stop_selector`. 
 `start_stop_selector` is required and is used to define the reference stop used with `travel_time_to_stop`. */
    bool has_start_stop_selector;
    transit_realtime_StopSelector start_stop_selector;
    /* The stop selector of the last stop of the original trip that is to be affected by this modification. 
 The selection is inclusive, so if only one stop_time is replaced by that modification, `start_stop_selector` and `end_stop_selector` must be equivalent.
 If no stop_time is replaced, `end_stop_selector` must not be provided. It's otherwise required. */
    bool has_end_stop_selector;
    transit_realtime_StopSelector end_stop_selector;
    /* The number of seconds of delay to add to all departure and arrival times following the end of this modification. 
 If multiple modifications apply to the same trip, the delays accumulate as the trip advances. */
    bool has_propagated_modification_delay;
    int32_t propagated_modification_delay;
    /* A list of replacement stops, replacing those of the original trip. 
 The length of the new stop times may be less, the same, or greater than the number of replaced stop times. */
    pb_callback_t replacement_stops;
    /* An `id` value from the `FeedEntity` message that contains the `Alert` describing this Modification for user-facing communication. */
    pb_callback_t service_alert_id;
    /* This timestamp identifies the moment when the modification has last been changed.
 In POSIX time (i.e., number of seconds since January 1st 1970 00:00:00 UTC). */
    bool has_last_modified_time;
    uint64_t last_modified_time;
    pb_extension_t *extensions;
} transit_realtime_TripModifications_Modification;

/* NOTE: This field is still experimental, and subject to change. It may be formally adopted in the future. */
typedef struct _transit_realtime_ReplacementStop {
    /* The difference in seconds between the arrival time at this stop and the arrival time at the reference stop. The reference stop is the stop prior to start_stop_selector. If the modification begins at the first stop of the trip, then the first stop of the trip is the reference stop.
 This value MUST be monotonically increasing and may only be a negative number if the first stop of the original trip is the reference stop. */
    bool has_travel_time_to_stop;
    int32_t travel_time_to_stop;
    /* The replacement stop ID which will now be visited by the trip. May refer to a new stop added using a GTFS-RT Stop message, or to an existing stop defined in the GTFS-Static feedâ€™s stops.txt. The stop MUST have location_type=0 (routable stops). */
    pb_callback_t stop_id;
    pb_extension_t *extensions;
} transit_realtime_ReplacementStop;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _transit_realtime_FeedHeader_Incrementality_MIN transit_realtime_FeedHeader_Incrementality_FULL_DATASET
#define _transit_realtime_FeedHeader_Incrementality_MAX transit_realtime_FeedHeader_Incrementality_DIFFERENTIAL
#define _transit_realtime_FeedHeader_Incrementality_ARRAYSIZE ((transit_realtime_FeedHeader_Incrementality)(transit_realtime_FeedHeader_Incrementality_DIFFERENTIAL+1))

#define _transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship_MIN transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship_SCHEDULED
#define _transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship_MAX transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship_UNSCHEDULED
#define _transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship_ARRAYSIZE ((transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship)(transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship_UNSCHEDULED+1))

#define _transit_realtime_VehiclePosition_VehicleStopStatus_MIN transit_realtime_VehiclePosition_VehicleStopStatus_INCOMING_AT
#define _transit_realtime_VehiclePosition_VehicleStopStatus_MAX transit_realtime_VehiclePosition_VehicleStopStatus_IN_TRANSIT_TO
#define _transit_realtime_VehiclePosition_VehicleStopStatus_ARRAYSIZE ((transit_realtime_VehiclePosition_VehicleStopStatus)(transit_realtime_VehiclePosition_VehicleStopStatus_IN_TRANSIT_TO+1))

#define _transit_realtime_VehiclePosition_CongestionLevel_MIN transit_realtime_VehiclePosition_CongestionLevel_UNKNOWN_CONGESTION_LEVEL
#define _transit_realtime_VehiclePosition_CongestionLevel_MAX transit_realtime_VehiclePosition_CongestionLevel_SEVERE_CONGESTION
#define _transit_realtime_VehiclePosition_CongestionLevel_ARRAYSIZE ((transit_realtime_VehiclePosition_CongestionLevel)(transit_realtime_VehiclePosition_CongestionLevel_SEVERE_CONGESTION+1))

#define _transit_realtime_VehiclePosition_OccupancyStatus_MIN transit_realtime_VehiclePosition_OccupancyStatus_EMPTY
#define _transit_realtime_VehiclePosition_OccupancyStatus_MAX transit_realtime_VehiclePosition_OccupancyStatus_NOT_BOARDABLE
#define _transit_realtime_VehiclePosition_OccupancyStatus_ARRAYSIZE ((transit_realtime_VehiclePosition_OccupancyStatus)(transit_realtime_VehiclePosition_OccupancyStatus_NOT_BOARDABLE+1))

#define _transit_realtime_Alert_Cause_MIN transit_realtime_Alert_Cause_UNKNOWN_CAUSE
#define _transit_realtime_Alert_Cause_MAX transit_realtime_Alert_Cause_MEDICAL_EMERGENCY
#define _transit_realtime_Alert_Cause_ARRAYSIZE ((transit_realtime_Alert_Cause)(transit_realtime_Alert_Cause_MEDICAL_EMERGENCY+1))

#define _transit_realtime_Alert_Effect_MIN transit_realtime_Alert_Effect_NO_SERVICE
#define _transit_realtime_Alert_Effect_MAX transit_realtime_Alert_Effect_ACCESSIBILITY_ISSUE
#define _transit_realtime_Alert_Effect_ARRAYSIZE ((transit_realtime_Alert_Effect)(transit_realtime_Alert_Effect_ACCESSIBILITY_ISSUE+1))

#define _transit_realtime_Alert_SeverityLevel_MIN transit_realtime_Alert_SeverityLevel_UNKNOWN_SEVERITY
#define _transit_realtime_Alert_SeverityLevel_MAX transit_realtime_Alert_SeverityLevel_SEVERE
#define _transit_realtime_Alert_SeverityLevel_ARRAYSIZE ((transit_realtime_Alert_SeverityLevel)(transit_realtime_Alert_SeverityLevel_SEVERE+1))

#define _transit_realtime_TripDescriptor_ScheduleRelationship_MIN transit_realtime_TripDescriptor_ScheduleRelationship_SCHEDULED
#define _transit_realtime_TripDescriptor_ScheduleRelationship_MAX transit_realtime_TripDescriptor_ScheduleRelationship_DELETED
#define _transit_realtime_TripDescriptor_ScheduleRelationship_ARRAYSIZE ((transit_realtime_TripDescriptor_ScheduleRelationship)(transit_realtime_TripDescriptor_ScheduleRelationship_DELETED+1))

#define _transit_realtime_VehicleDescriptor_WheelchairAccessible_MIN transit_realtime_VehicleDescriptor_WheelchairAccessible_NO_VALUE
#define _transit_realtime_VehicleDescriptor_WheelchairAccessible_MAX transit_realtime_VehicleDescriptor_WheelchairAccessible_WHEELCHAIR_INACCESSIBLE
#define _transit_realtime_VehicleDescriptor_WheelchairAccessible_ARRAYSIZE ((transit_realtime_VehicleDescriptor_WheelchairAccessible)(transit_realtime_VehicleDescriptor_WheelchairAccessible_WHEELCHAIR_INACCESSIBLE+1))

#define _transit_realtime_Stop_WheelchairBoarding_MIN transit_realtime_Stop_WheelchairBoarding_UNKNOWN
#define _transit_realtime_Stop_WheelchairBoarding_MAX transit_realtime_Stop_WheelchairBoarding_NOT_AVAILABLE
#define _transit_realtime_Stop_WheelchairBoarding_ARRAYSIZE ((transit_realtime_Stop_WheelchairBoarding)(transit_realtime_Stop_WheelchairBoarding_NOT_AVAILABLE+1))


#define transit_realtime_FeedHeader_incrementality_ENUMTYPE transit_realtime_FeedHeader_Incrementality




#define transit_realtime_TripUpdate_StopTimeUpdate_schedule_relationship_ENUMTYPE transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship
#define transit_realtime_TripUpdate_StopTimeUpdate_departure_occupancy_status_ENUMTYPE transit_realtime_VehiclePosition_OccupancyStatus



#define transit_realtime_VehiclePosition_current_status_ENUMTYPE transit_realtime_VehiclePosition_VehicleStopStatus
#define transit_realtime_VehiclePosition_congestion_level_ENUMTYPE transit_realtime_VehiclePosition_CongestionLevel
#define transit_realtime_VehiclePosition_occupancy_status_ENUMTYPE transit_realtime_VehiclePosition_OccupancyStatus

#define transit_realtime_VehiclePosition_CarriageDetails_occupancy_status_ENUMTYPE transit_realtime_VehiclePosition_OccupancyStatus

#define transit_realtime_Alert_cause_ENUMTYPE transit_realtime_Alert_Cause
#define transit_realtime_Alert_effect_ENUMTYPE transit_realtime_Alert_Effect
#define transit_realtime_Alert_severity_level_ENUMTYPE transit_realtime_Alert_SeverityLevel



#define transit_realtime_TripDescriptor_schedule_relationship_ENUMTYPE transit_realtime_TripDescriptor_ScheduleRelationship


#define transit_realtime_VehicleDescriptor_wheelchair_accessible_ENUMTYPE transit_realtime_VehicleDescriptor_WheelchairAccessible







#define transit_realtime_Stop_wheelchair_boarding_ENUMTYPE transit_realtime_Stop_WheelchairBoarding







/* Initializer values for message structs */
#define transit_realtime_FeedMessage_init_default {transit_realtime_FeedHeader_init_default, {{NULL}, NULL}, NULL}
#define transit_realtime_FeedHeader_init_default {{{NULL}, NULL}, false, transit_realtime_FeedHeader_Incrementality_FULL_DATASET, false, 0, {{NULL}, NULL}, NULL}
#define transit_realtime_FeedEntity_init_default {{{NULL}, NULL}, false, false, false, transit_realtime_TripUpdate_init_default, false, transit_realtime_VehiclePosition_init_default, false, transit_realtime_Alert_init_default, false, transit_realtime_Shape_init_default, false, transit_realtime_Stop_init_default, false, transit_realtime_TripModifications_init_default, NULL}
#define transit_realtime_TripUpdate_init_default {transit_realtime_TripDescriptor_init_default, {{NULL}, NULL}, false, transit_realtime_VehicleDescriptor_init_default, false, 0, false, 0, false, transit_realtime_TripUpdate_TripProperties_init_default, NULL}
#define transit_realtime_TripUpdate_StopTimeEvent_init_default {false, 0, false, 0, false, 0, NULL}
#define transit_realtime_TripUpdate_StopTimeUpdate_init_default {false, 0, false, transit_realtime_TripUpdate_StopTimeEvent_init_default, false, transit_realtime_TripUpdate_StopTimeEvent_init_default, {{NULL}, NULL}, false, transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship_SCHEDULED, false, transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_init_default, false, _transit_realtime_VehiclePosition_OccupancyStatus_MIN, NULL}
#define transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_init_default {{{NULL}, NULL}, NULL}
#define transit_realtime_TripUpdate_TripProperties_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_VehiclePosition_init_default {false, transit_realtime_TripDescriptor_init_default, false, transit_realtime_Position_init_default, false, 0, false, transit_realtime_VehiclePosition_VehicleStopStatus_IN_TRANSIT_TO, false, 0, false, _transit_realtime_VehiclePosition_CongestionLevel_MIN, {{NULL}, NULL}, false, transit_realtime_VehicleDescriptor_init_default, false, _transit_realtime_VehiclePosition_OccupancyStatus_MIN, false, 0, {{NULL}, NULL}, NULL}
#define transit_realtime_VehiclePosition_CarriageDetails_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, transit_realtime_VehiclePosition_OccupancyStatus_NO_DATA_AVAILABLE, false, -1, false, 0, NULL}
#define transit_realtime_Alert_init_default      {{{NULL}, NULL}, {{NULL}, NULL}, false, transit_realtime_Alert_Cause_UNKNOWN_CAUSE, false, transit_realtime_Alert_Effect_UNKNOWN_EFFECT, false, transit_realtime_TranslatedString_init_default, false, transit_realtime_TranslatedString_init_default, false, transit_realtime_TranslatedString_init_default, false, transit_realtime_TranslatedString_init_default, false, transit_realtime_TranslatedString_init_default, false, transit_realtime_Alert_SeverityLevel_UNKNOWN_SEVERITY, false, transit_realtime_TranslatedImage_init_default, false, transit_realtime_TranslatedString_init_default, false, transit_realtime_TranslatedString_init_default, false, transit_realtime_TranslatedString_init_default, NULL}
#define transit_realtime_TimeRange_init_default  {false, 0, false, 0, NULL}
#define transit_realtime_Position_init_default   {0, 0, false, 0, false, 0, false, 0, NULL}
#define transit_realtime_TripDescriptor_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, _transit_realtime_TripDescriptor_ScheduleRelationship_MIN, {{NULL}, NULL}, false, 0, false, transit_realtime_TripDescriptor_ModifiedTripSelector_init_default, NULL}
#define transit_realtime_TripDescriptor_ModifiedTripSelector_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_VehicleDescriptor_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, transit_realtime_VehicleDescriptor_WheelchairAccessible_NO_VALUE, NULL}
#define transit_realtime_EntitySelector_init_default {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, transit_realtime_TripDescriptor_init_default, {{NULL}, NULL}, false, 0, NULL}
#define transit_realtime_TranslatedString_init_default {{{NULL}, NULL}, NULL}
#define transit_realtime_TranslatedString_Translation_init_default {{{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_TranslatedImage_init_default {{{NULL}, NULL}, NULL}
#define transit_realtime_TranslatedImage_LocalizedImage_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_Shape_init_default      {{{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_Stop_init_default       {{{NULL}, NULL}, false, transit_realtime_TranslatedString_init_default, false, transit_realtime_TranslatedString_init_default, false, transit_realtime_TranslatedString_init_default, false, transit_realtime_TranslatedString_init_default, false, 0, false, 0, {{NULL}, NULL}, false, transit_realtime_TranslatedString_init_default, {{NULL}, NULL}, {{NULL}, NULL}, false, transit_realtime_Stop_WheelchairBoarding_UNKNOWN, {{NULL}, NULL}, false, transit_realtime_TranslatedString_init_default, NULL}
#define transit_realtime_TripModifications_init_default {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_TripModifications_Modification_init_default {false, transit_realtime_StopSelector_init_default, false, transit_realtime_StopSelector_init_default, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, NULL}
#define transit_realtime_TripModifications_SelectedTrips_init_default {{{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_StopSelector_init_default {false, 0, {{NULL}, NULL}, NULL}
#define transit_realtime_ReplacementStop_init_default {false, 0, {{NULL}, NULL}, NULL}
#define transit_realtime_FeedMessage_init_zero   {transit_realtime_FeedHeader_init_zero, {{NULL}, NULL}, NULL}
#define transit_realtime_FeedHeader_init_zero    {{{NULL}, NULL}, false, _transit_realtime_FeedHeader_Incrementality_MIN, false, 0, {{NULL}, NULL}, NULL}
#define transit_realtime_FeedEntity_init_zero    {{{NULL}, NULL}, false, 0, false, transit_realtime_TripUpdate_init_zero, false, transit_realtime_VehiclePosition_init_zero, false, transit_realtime_Alert_init_zero, false, transit_realtime_Shape_init_zero, false, transit_realtime_Stop_init_zero, false, transit_realtime_TripModifications_init_zero, NULL}
#define transit_realtime_TripUpdate_init_zero    {transit_realtime_TripDescriptor_init_zero, {{NULL}, NULL}, false, transit_realtime_VehicleDescriptor_init_zero, false, 0, false, 0, false, transit_realtime_TripUpdate_TripProperties_init_zero, NULL}
#define transit_realtime_TripUpdate_StopTimeEvent_init_zero {false, 0, false, 0, false, 0, NULL}
#define transit_realtime_TripUpdate_StopTimeUpdate_init_zero {false, 0, false, transit_realtime_TripUpdate_StopTimeEvent_init_zero, false, transit_realtime_TripUpdate_StopTimeEvent_init_zero, {{NULL}, NULL}, false, _transit_realtime_TripUpdate_StopTimeUpdate_ScheduleRelationship_MIN, false, transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_init_zero, false, _transit_realtime_VehiclePosition_OccupancyStatus_MIN, NULL}
#define transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_init_zero {{{NULL}, NULL}, NULL}
#define transit_realtime_TripUpdate_TripProperties_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_VehiclePosition_init_zero {false, transit_realtime_TripDescriptor_init_zero, false, transit_realtime_Position_init_zero, false, 0, false, _transit_realtime_VehiclePosition_VehicleStopStatus_MIN, false, 0, false, _transit_realtime_VehiclePosition_CongestionLevel_MIN, {{NULL}, NULL}, false, transit_realtime_VehicleDescriptor_init_zero, false, _transit_realtime_VehiclePosition_OccupancyStatus_MIN, false, 0, {{NULL}, NULL}, NULL}
#define transit_realtime_VehiclePosition_CarriageDetails_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, _transit_realtime_VehiclePosition_OccupancyStatus_MIN, false, 0, false, 0, NULL}
#define transit_realtime_Alert_init_zero         {{{NULL}, NULL}, {{NULL}, NULL}, false, _transit_realtime_Alert_Cause_MIN, false, _transit_realtime_Alert_Effect_MIN, false, transit_realtime_TranslatedString_init_zero, false, transit_realtime_TranslatedString_init_zero, false, transit_realtime_TranslatedString_init_zero, false, transit_realtime_TranslatedString_init_zero, false, transit_realtime_TranslatedString_init_zero, false, _transit_realtime_Alert_SeverityLevel_MIN, false, transit_realtime_TranslatedImage_init_zero, false, transit_realtime_TranslatedString_init_zero, false, transit_realtime_TranslatedString_init_zero, false, transit_realtime_TranslatedString_init_zero, NULL}
#define transit_realtime_TimeRange_init_zero     {false, 0, false, 0, NULL}
#define transit_realtime_Position_init_zero      {0, 0, false, 0, false, 0, false, 0, NULL}
#define transit_realtime_TripDescriptor_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, _transit_realtime_TripDescriptor_ScheduleRelationship_MIN, {{NULL}, NULL}, false, 0, false, transit_realtime_TripDescriptor_ModifiedTripSelector_init_zero, NULL}
#define transit_realtime_TripDescriptor_ModifiedTripSelector_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_VehicleDescriptor_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, _transit_realtime_VehicleDescriptor_WheelchairAccessible_MIN, NULL}
#define transit_realtime_EntitySelector_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, transit_realtime_TripDescriptor_init_zero, {{NULL}, NULL}, false, 0, NULL}
#define transit_realtime_TranslatedString_init_zero {{{NULL}, NULL}, NULL}
#define transit_realtime_TranslatedString_Translation_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_TranslatedImage_init_zero {{{NULL}, NULL}, NULL}
#define transit_realtime_TranslatedImage_LocalizedImage_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_Shape_init_zero         {{{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_Stop_init_zero          {{{NULL}, NULL}, false, transit_realtime_TranslatedString_init_zero, false, transit_realtime_TranslatedString_init_zero, false, transit_realtime_TranslatedString_init_zero, false, transit_realtime_TranslatedString_init_zero, false, 0, false, 0, {{NULL}, NULL}, false, transit_realtime_TranslatedString_init_zero, {{NULL}, NULL}, {{NULL}, NULL}, false, _transit_realtime_Stop_WheelchairBoarding_MIN, {{NULL}, NULL}, false, transit_realtime_TranslatedString_init_zero, NULL}
#define transit_realtime_TripModifications_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_TripModifications_Modification_init_zero {false, transit_realtime_StopSelector_init_zero, false, transit_realtime_StopSelector_init_zero, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, NULL}
#define transit_realtime_TripModifications_SelectedTrips_init_zero {{{NULL}, NULL}, {{NULL}, NULL}, NULL}
#define transit_realtime_StopSelector_init_zero  {false, 0, {{NULL}, NULL}, NULL}
#define transit_realtime_ReplacementStop_init_zero {false, 0, {{NULL}, NULL}, NULL}

/* Field tags (for use in manual encoding/decoding) */
#define transit_realtime_FeedHeader_gtfs_realtime_version_tag 1
#define transit_realtime_FeedHeader_incrementality_tag 2
#define transit_realtime_FeedHeader_timestamp_tag 3
#define transit_realtime_FeedHeader_feed_version_tag 4
#define transit_realtime_FeedMessage_header_tag  1
#define transit_realtime_FeedMessage_entity_tag  2
#define transit_realtime_TripUpdate_StopTimeEvent_delay_tag 1
#define transit_realtime_TripUpdate_StopTimeEvent_time_tag 2
#define transit_realtime_TripUpdate_StopTimeEvent_uncertainty_tag 3
#define transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_assigned_stop_id_tag 1
#define transit_realtime_TripUpdate_StopTimeUpdate_stop_sequence_tag 1
#define transit_realtime_TripUpdate_StopTimeUpdate_arrival_tag 2
#define transit_realtime_TripUpdate_StopTimeUpdate_departure_tag 3
#define transit_realtime_TripUpdate_StopTimeUpdate_stop_id_tag 4
#define transit_realtime_TripUpdate_StopTimeUpdate_schedule_relationship_tag 5
#define transit_realtime_TripUpdate_StopTimeUpdate_stop_time_properties_tag 6
#define transit_realtime_TripUpdate_StopTimeUpdate_departure_occupancy_status_tag 7
#define transit_realtime_TripUpdate_TripProperties_trip_id_tag 1
#define transit_realtime_TripUpdate_TripProperties_start_date_tag 2
#define transit_realtime_TripUpdate_TripProperties_start_time_tag 3
#define transit_realtime_TripUpdate_TripProperties_shape_id_tag 4
#define transit_realtime_VehiclePosition_CarriageDetails_id_tag 1
#define transit_realtime_VehiclePosition_CarriageDetails_label_tag 2
#define transit_realtime_VehiclePosition_CarriageDetails_occupancy_status_tag 3
#define transit_realtime_VehiclePosition_CarriageDetails_occupancy_percentage_tag 4
#define transit_realtime_VehiclePosition_CarriageDetails_carriage_sequence_tag 5
#define transit_realtime_TimeRange_start_tag     1
#define transit_realtime_TimeRange_end_tag       2
#define transit_realtime_Position_latitude_tag   1
#define transit_realtime_Position_longitude_tag  2
#define transit_realtime_Position_bearing_tag    3
#define transit_realtime_Position_odometer_tag   4
#define transit_realtime_Position_speed_tag      5
#define transit_realtime_TripDescriptor_ModifiedTripSelector_modifications_id_tag 1
#define transit_realtime_TripDescriptor_ModifiedTripSelector_affected_trip_id_tag 2
#define transit_realtime_TripDescriptor_ModifiedTripSelector_start_time_tag 3
#define transit_realtime_TripDescriptor_ModifiedTripSelector_start_date_tag 4
#define transit_realtime_TripDescriptor_trip_id_tag 1
#define transit_realtime_TripDescriptor_start_time_tag 2
#define transit_realtime_TripDescriptor_start_date_tag 3
#define transit_realtime_TripDescriptor_schedule_relationship_tag 4
#define transit_realtime_TripDescriptor_route_id_tag 5
#define transit_realtime_TripDescriptor_direction_id_tag 6
#define transit_realtime_TripDescriptor_modified_trip_tag 7
#define transit_realtime_VehicleDescriptor_id_tag 1
#define transit_realtime_VehicleDescriptor_label_tag 2
#define transit_realtime_VehicleDescriptor_license_plate_tag 3
#define transit_realtime_VehicleDescriptor_wheelchair_accessible_tag 4
#define transit_realtime_TripUpdate_trip_tag     1
#define transit_realtime_TripUpdate_stop_time_update_tag 2
#define transit_realtime_TripUpdate_vehicle_tag  3
#define transit_realtime_TripUpdate_timestamp_tag 4
#define transit_realtime_TripUpdate_delay_tag    5
#define transit_realtime_TripUpdate_trip_properties_tag 6
#define transit_realtime_VehiclePosition_trip_tag 1
#define transit_realtime_VehiclePosition_position_tag 2
#define transit_realtime_VehiclePosition_current_stop_sequence_tag 3
#define transit_realtime_VehiclePosition_current_status_tag 4
#define transit_realtime_VehiclePosition_timestamp_tag 5
#define transit_realtime_VehiclePosition_congestion_level_tag 6
#define transit_realtime_VehiclePosition_stop_id_tag 7
#define transit_realtime_VehiclePosition_vehicle_tag 8
#define transit_realtime_VehiclePosition_occupancy_status_tag 9
#define transit_realtime_VehiclePosition_occupancy_percentage_tag 10
#define transit_realtime_VehiclePosition_multi_carriage_details_tag 11
#define transit_realtime_EntitySelector_agency_id_tag 1
#define transit_realtime_EntitySelector_route_id_tag 2
#define transit_realtime_EntitySelector_route_type_tag 3
#define transit_realtime_EntitySelector_trip_tag 4
#define transit_realtime_EntitySelector_stop_id_tag 5
#define transit_realtime_EntitySelector_direction_id_tag 6
#define transit_realtime_TranslatedString_translation_tag 1
#define transit_realtime_TranslatedString_Translation_text_tag 1
#define transit_realtime_TranslatedString_Translation_language_tag 2
#define transit_realtime_TranslatedImage_localized_image_tag 1
#define transit_realtime_Alert_active_period_tag 1
#define transit_realtime_Alert_informed_entity_tag 5
#define transit_realtime_Alert_cause_tag         6
#define transit_realtime_Alert_effect_tag        7
#define transit_realtime_Alert_url_tag           8
#define transit_realtime_Alert_header_text_tag   10
#define transit_realtime_Alert_description_text_tag 11
#define transit_realtime_Alert_tts_header_text_tag 12
#define transit_realtime_Alert_tts_description_text_tag 13
#define transit_realtime_Alert_severity_level_tag 14
#define transit_realtime_Alert_image_tag         15
#define transit_realtime_Alert_image_alternative_text_tag 16
#define transit_realtime_Alert_cause_detail_tag  17
#define transit_realtime_Alert_effect_detail_tag 18
#define transit_realtime_TranslatedImage_LocalizedImage_url_tag 1
#define transit_realtime_TranslatedImage_LocalizedImage_media_type_tag 2
#define transit_realtime_TranslatedImage_LocalizedImage_language_tag 3
#define transit_realtime_Shape_shape_id_tag      1
#define transit_realtime_Shape_encoded_polyline_tag 2
#define transit_realtime_Stop_stop_id_tag        1
#define transit_realtime_Stop_stop_code_tag      2
#define transit_realtime_Stop_stop_name_tag      3
#define transit_realtime_Stop_tts_stop_name_tag  4
#define transit_realtime_Stop_stop_desc_tag      5
#define transit_realtime_Stop_stop_lat_tag       6
#define transit_realtime_Stop_stop_lon_tag       7
#define transit_realtime_Stop_zone_id_tag        8
#define transit_realtime_Stop_stop_url_tag       9
#define transit_realtime_Stop_parent_station_tag 11
#define transit_realtime_Stop_stop_timezone_tag  12
#define transit_realtime_Stop_wheelchair_boarding_tag 13
#define transit_realtime_Stop_level_id_tag       14
#define transit_realtime_Stop_platform_code_tag  15
#define transit_realtime_TripModifications_selected_trips_tag 1
#define transit_realtime_TripModifications_start_times_tag 2
#define transit_realtime_TripModifications_service_dates_tag 3
#define transit_realtime_TripModifications_modifications_tag 4
#define transit_realtime_FeedEntity_id_tag       1
#define transit_realtime_FeedEntity_is_deleted_tag 2
#define transit_realtime_FeedEntity_trip_update_tag 3
#define transit_realtime_FeedEntity_vehicle_tag  4
#define transit_realtime_FeedEntity_alert_tag    5
#define transit_realtime_FeedEntity_shape_tag    6
#define transit_realtime_FeedEntity_stop_tag     7
#define transit_realtime_FeedEntity_trip_modifications_tag 8
#define transit_realtime_TripModifications_SelectedTrips_trip_ids_tag 1
#define transit_realtime_TripModifications_SelectedTrips_shape_id_tag 2
#define transit_realtime_StopSelector_stop_sequence_tag 1
#define transit_realtime_StopSelector_stop_id_tag 2
#define transit_realtime_TripModifications_Modification_start_stop_selector_tag 1
#define transit_realtime_TripModifications_Modification_end_stop_selector_tag 2
#define transit_realtime_TripModifications_Modification_propagated_modification_delay_tag 3
#define transit_realtime_TripModifications_Modification_replacement_stops_tag 4
#define transit_realtime_TripModifications_Modification_service_alert_id_tag 5
#define transit_realtime_TripModifications_Modification_last_modified_time_tag 6
#define transit_realtime_ReplacementStop_travel_time_to_stop_tag 1
#define transit_realtime_ReplacementStop_stop_id_tag 2

/* Struct field encoding specification for nanopb */
#define transit_realtime_FeedMessage_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, CALLBACK, REPEATED, MESSAGE,  entity,            2) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_FeedMessage_CALLBACK pb_default_field_callback
#define transit_realtime_FeedMessage_DEFAULT NULL
#define transit_realtime_FeedMessage_header_MSGTYPE transit_realtime_FeedHeader
#define transit_realtime_FeedMessage_entity_MSGTYPE transit_realtime_FeedEntity

#define transit_realtime_FeedHeader_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   gtfs_realtime_version,   1) \
X(a, STATIC,   OPTIONAL, UENUM,    incrementality,    2) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         3) \
X(a, CALLBACK, OPTIONAL, STRING,   feed_version,      4) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_FeedHeader_CALLBACK pb_default_field_callback
#define transit_realtime_FeedHeader_DEFAULT NULL

#define transit_realtime_FeedEntity_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   id,                1) \
X(a, STATIC,   OPTIONAL, BOOL,     is_deleted,        2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  trip_update,       3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  vehicle,           4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  alert,             5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  shape,             6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stop,              7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  trip_modifications,   8) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_FeedEntity_CALLBACK pb_default_field_callback
#define transit_realtime_FeedEntity_DEFAULT (const pb_byte_t*)"\x10\x00\x00"
#define transit_realtime_FeedEntity_trip_update_MSGTYPE transit_realtime_TripUpdate
#define transit_realtime_FeedEntity_vehicle_MSGTYPE transit_realtime_VehiclePosition
#define transit_realtime_FeedEntity_alert_MSGTYPE transit_realtime_Alert
#define transit_realtime_FeedEntity_shape_MSGTYPE transit_realtime_Shape
#define transit_realtime_FeedEntity_stop_MSGTYPE transit_realtime_Stop
#define transit_realtime_FeedEntity_trip_modifications_MSGTYPE transit_realtime_TripModifications

#define transit_realtime_TripUpdate_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  trip,              1) \
X(a, CALLBACK, REPEATED, MESSAGE,  stop_time_update,   2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  vehicle,           3) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         4) \
X(a, STATIC,   OPTIONAL, INT32,    delay,             5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  trip_properties,   6) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TripUpdate_CALLBACK pb_default_field_callback
#define transit_realtime_TripUpdate_DEFAULT NULL
#define transit_realtime_TripUpdate_trip_MSGTYPE transit_realtime_TripDescriptor
#define transit_realtime_TripUpdate_stop_time_update_MSGTYPE transit_realtime_TripUpdate_StopTimeUpdate
#define transit_realtime_TripUpdate_vehicle_MSGTYPE transit_realtime_VehicleDescriptor
#define transit_realtime_TripUpdate_trip_properties_MSGTYPE transit_realtime_TripUpdate_TripProperties

#define transit_realtime_TripUpdate_StopTimeEvent_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    delay,             1) \
X(a, STATIC,   OPTIONAL, INT64,    time,              2) \
X(a, STATIC,   OPTIONAL, INT32,    uncertainty,       3) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TripUpdate_StopTimeEvent_CALLBACK pb_default_field_callback
#define transit_realtime_TripUpdate_StopTimeEvent_DEFAULT NULL

#define transit_realtime_TripUpdate_StopTimeUpdate_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   stop_sequence,     1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  arrival,           2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  departure,         3) \
X(a, CALLBACK, OPTIONAL, STRING,   stop_id,           4) \
X(a, STATIC,   OPTIONAL, UENUM,    schedule_relationship,   5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stop_time_properties,   6) \
X(a, STATIC,   OPTIONAL, UENUM,    departure_occupancy_status,   7) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TripUpdate_StopTimeUpdate_CALLBACK pb_default_field_callback
#define transit_realtime_TripUpdate_StopTimeUpdate_DEFAULT NULL
#define transit_realtime_TripUpdate_StopTimeUpdate_arrival_MSGTYPE transit_realtime_TripUpdate_StopTimeEvent
#define transit_realtime_TripUpdate_StopTimeUpdate_departure_MSGTYPE transit_realtime_TripUpdate_StopTimeEvent
#define transit_realtime_TripUpdate_StopTimeUpdate_stop_time_properties_MSGTYPE transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties

#define transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   assigned_stop_id,   1) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_CALLBACK pb_default_field_callback
#define transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_DEFAULT NULL

#define transit_realtime_TripUpdate_TripProperties_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   trip_id,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   start_date,        2) \
X(a, CALLBACK, OPTIONAL, STRING,   start_time,        3) \
X(a, CALLBACK, OPTIONAL, STRING,   shape_id,          4) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TripUpdate_TripProperties_CALLBACK pb_default_field_callback
#define transit_realtime_TripUpdate_TripProperties_DEFAULT NULL

#define transit_realtime_VehiclePosition_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  trip,              1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  position,          2) \
X(a, STATIC,   OPTIONAL, UINT32,   current_stop_sequence,   3) \
X(a, STATIC,   OPTIONAL, UENUM,    current_status,    4) \
X(a, STATIC,   OPTIONAL, UINT64,   timestamp,         5) \
X(a, STATIC,   OPTIONAL, UENUM,    congestion_level,   6) \
X(a, CALLBACK, OPTIONAL, STRING,   stop_id,           7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  vehicle,           8) \
X(a, STATIC,   OPTIONAL, UENUM,    occupancy_status,   9) \
X(a, STATIC,   OPTIONAL, UINT32,   occupancy_percentage,  10) \
X(a, CALLBACK, REPEATED, MESSAGE,  multi_carriage_details,  11) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_VehiclePosition_CALLBACK pb_default_field_callback
#define transit_realtime_VehiclePosition_DEFAULT (const pb_byte_t*)"\x20\x02\x00"
#define transit_realtime_VehiclePosition_trip_MSGTYPE transit_realtime_TripDescriptor
#define transit_realtime_VehiclePosition_position_MSGTYPE transit_realtime_Position
#define transit_realtime_VehiclePosition_vehicle_MSGTYPE transit_realtime_VehicleDescriptor
#define transit_realtime_VehiclePosition_multi_carriage_details_MSGTYPE transit_realtime_VehiclePosition_CarriageDetails

#define transit_realtime_VehiclePosition_CarriageDetails_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   id,                1) \
X(a, CALLBACK, OPTIONAL, STRING,   label,             2) \
X(a, STATIC,   OPTIONAL, UENUM,    occupancy_status,   3) \
X(a, STATIC,   OPTIONAL, INT32,    occupancy_percentage,   4) \
X(a, STATIC,   OPTIONAL, UINT32,   carriage_sequence,   5) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_VehiclePosition_CarriageDetails_CALLBACK pb_default_field_callback
#define transit_realtime_VehiclePosition_CarriageDetails_DEFAULT (const pb_byte_t*)"\x18\x07\x20\xff\xff\xff\xff\xff\xff\xff\xff\xff\x01\x00"

#define transit_realtime_Alert_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  active_period,     1) \
X(a, CALLBACK, REPEATED, MESSAGE,  informed_entity,   5) \
X(a, STATIC,   OPTIONAL, UENUM,    cause,             6) \
X(a, STATIC,   OPTIONAL, UENUM,    effect,            7) \
X(a, STATIC,   OPTIONAL, MESSAGE,  url,               8) \
X(a, STATIC,   OPTIONAL, MESSAGE,  header_text,      10) \
X(a, STATIC,   OPTIONAL, MESSAGE,  description_text,  11) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tts_header_text,  12) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tts_description_text,  13) \
X(a, STATIC,   OPTIONAL, UENUM,    severity_level,   14) \
X(a, STATIC,   OPTIONAL, MESSAGE,  image,            15) \
X(a, STATIC,   OPTIONAL, MESSAGE,  image_alternative_text,  16) \
X(a, STATIC,   OPTIONAL, MESSAGE,  cause_detail,     17) \
X(a, STATIC,   OPTIONAL, MESSAGE,  effect_detail,    18) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_Alert_CALLBACK pb_default_field_callback
#define transit_realtime_Alert_DEFAULT (const pb_byte_t*)"\x30\x01\x38\x08\x70\x01\x00"
#define transit_realtime_Alert_active_period_MSGTYPE transit_realtime_TimeRange
#define transit_realtime_Alert_informed_entity_MSGTYPE transit_realtime_EntitySelector
#define transit_realtime_Alert_url_MSGTYPE transit_realtime_TranslatedString
#define transit_realtime_Alert_header_text_MSGTYPE transit_realtime_TranslatedString
#define transit_realtime_Alert_description_text_MSGTYPE transit_realtime_TranslatedString
#define transit_realtime_Alert_tts_header_text_MSGTYPE transit_realtime_TranslatedString
#define transit_realtime_Alert_tts_description_text_MSGTYPE transit_realtime_TranslatedString
#define transit_realtime_Alert_image_MSGTYPE transit_realtime_TranslatedImage
#define transit_realtime_Alert_image_alternative_text_MSGTYPE transit_realtime_TranslatedString
#define transit_realtime_Alert_cause_detail_MSGTYPE transit_realtime_TranslatedString
#define transit_realtime_Alert_effect_detail_MSGTYPE transit_realtime_TranslatedString

#define transit_realtime_TimeRange_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT64,   start,             1) \
X(a, STATIC,   OPTIONAL, UINT64,   end,               2) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TimeRange_CALLBACK pb_default_field_callback
#define transit_realtime_TimeRange_DEFAULT NULL

#define transit_realtime_Position_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    latitude,          1) \
X(a, STATIC,   REQUIRED, FLOAT,    longitude,         2) \
X(a, STATIC,   OPTIONAL, FLOAT,    bearing,           3) \
X(a, STATIC,   OPTIONAL, DOUBLE,   odometer,          4) \
X(a, STATIC,   OPTIONAL, FLOAT,    speed,             5) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_Position_CALLBACK pb_default_field_callback
#define transit_realtime_Position_DEFAULT NULL

#define transit_realtime_TripDescriptor_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   trip_id,           1) \
X(a, CALLBACK, OPTIONAL, STRING,   start_time,        2) \
X(a, CALLBACK, OPTIONAL, STRING,   start_date,        3) \
X(a, STATIC,   OPTIONAL, UENUM,    schedule_relationship,   4) \
X(a, CALLBACK, OPTIONAL, STRING,   route_id,          5) \
X(a, STATIC,   OPTIONAL, UINT32,   direction_id,      6) \
X(a, STATIC,   OPTIONAL, MESSAGE,  modified_trip,     7) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TripDescriptor_CALLBACK pb_default_field_callback
#define transit_realtime_TripDescriptor_DEFAULT NULL
#define transit_realtime_TripDescriptor_modified_trip_MSGTYPE transit_realtime_TripDescriptor_ModifiedTripSelector

#define transit_realtime_TripDescriptor_ModifiedTripSelector_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   modifications_id,   1) \
X(a, CALLBACK, OPTIONAL, STRING,   affected_trip_id,   2) \
X(a, CALLBACK, OPTIONAL, STRING,   start_time,        3) \
X(a, CALLBACK, OPTIONAL, STRING,   start_date,        4) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TripDescriptor_ModifiedTripSelector_CALLBACK pb_default_field_callback
#define transit_realtime_TripDescriptor_ModifiedTripSelector_DEFAULT NULL

#define transit_realtime_VehicleDescriptor_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   id,                1) \
X(a, CALLBACK, OPTIONAL, STRING,   label,             2) \
X(a, CALLBACK, OPTIONAL, STRING,   license_plate,     3) \
X(a, STATIC,   OPTIONAL, UENUM,    wheelchair_accessible,   4) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_VehicleDescriptor_CALLBACK pb_default_field_callback
#define transit_realtime_VehicleDescriptor_DEFAULT NULL

#define transit_realtime_EntitySelector_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   agency_id,         1) \
X(a, CALLBACK, OPTIONAL, STRING,   route_id,          2) \
X(a, STATIC,   OPTIONAL, INT32,    route_type,        3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  trip,              4) \
X(a, CALLBACK, OPTIONAL, STRING,   stop_id,           5) \
X(a, STATIC,   OPTIONAL, UINT32,   direction_id,      6) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_EntitySelector_CALLBACK pb_default_field_callback
#define transit_realtime_EntitySelector_DEFAULT NULL
#define transit_realtime_EntitySelector_trip_MSGTYPE transit_realtime_TripDescriptor

#define transit_realtime_TranslatedString_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  translation,       1) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TranslatedString_CALLBACK pb_default_field_callback
#define transit_realtime_TranslatedString_DEFAULT NULL
#define transit_realtime_TranslatedString_translation_MSGTYPE transit_realtime_TranslatedString_Translation

#define transit_realtime_TranslatedString_Translation_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   text,              1) \
X(a, CALLBACK, OPTIONAL, STRING,   language,          2) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TranslatedString_Translation_CALLBACK pb_default_field_callback
#define transit_realtime_TranslatedString_Translation_DEFAULT NULL

#define transit_realtime_TranslatedImage_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  localized_image,   1) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TranslatedImage_CALLBACK pb_default_field_callback
#define transit_realtime_TranslatedImage_DEFAULT NULL
#define transit_realtime_TranslatedImage_localized_image_MSGTYPE transit_realtime_TranslatedImage_LocalizedImage

#define transit_realtime_TranslatedImage_LocalizedImage_FIELDLIST(X, a) \
X(a, CALLBACK, REQUIRED, STRING,   url,               1) \
X(a, CALLBACK, REQUIRED, STRING,   media_type,        2) \
X(a, CALLBACK, OPTIONAL, STRING,   language,          3) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TranslatedImage_LocalizedImage_CALLBACK pb_default_field_callback
#define transit_realtime_TranslatedImage_LocalizedImage_DEFAULT NULL

#define transit_realtime_Shape_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   shape_id,          1) \
X(a, CALLBACK, OPTIONAL, STRING,   encoded_polyline,   2) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_Shape_CALLBACK pb_default_field_callback
#define transit_realtime_Shape_DEFAULT NULL

#define transit_realtime_Stop_FIELDLIST(X, a) \
X(a, CALLBACK, OPTIONAL, STRING,   stop_id,           1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stop_code,         2) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stop_name,         3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  tts_stop_name,     4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stop_desc,         5) \
X(a, STATIC,   OPTIONAL, FLOAT,    stop_lat,          6) \
X(a, STATIC,   OPTIONAL, FLOAT,    stop_lon,          7) \
X(a, CALLBACK, OPTIONAL, STRING,   zone_id,           8) \
X(a, STATIC,   OPTIONAL, MESSAGE,  stop_url,          9) \
X(a, CALLBACK, OPTIONAL, STRING,   parent_station,   11) \
X(a, CALLBACK, OPTIONAL, STRING,   stop_timezone,    12) \
X(a, STATIC,   OPTIONAL, UENUM,    wheelchair_boarding,  13) \
X(a, CALLBACK, OPTIONAL, STRING,   level_id,         14) \
X(a, STATIC,   OPTIONAL, MESSAGE,  platform_code,    15) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_Stop_CALLBACK pb_default_field_callback
#define transit_realtime_Stop_DEFAULT NULL
#define transit_realtime_Stop_stop_code_MSGTYPE transit_realtime_TranslatedString
#define transit_realtime_Stop_stop_name_MSGTYPE transit_realtime_TranslatedString
#define transit_realtime_Stop_tts_stop_name_MSGTYPE transit_realtime_TranslatedString
#define transit_realtime_Stop_stop_desc_MSGTYPE transit_realtime_TranslatedString
#define transit_realtime_Stop_stop_url_MSGTYPE transit_realtime_TranslatedString
#define transit_realtime_Stop_platform_code_MSGTYPE transit_realtime_TranslatedString

#define transit_realtime_TripModifications_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  selected_trips,    1) \
X(a, CALLBACK, REPEATED, STRING,   start_times,       2) \
X(a, CALLBACK, REPEATED, STRING,   service_dates,     3) \
X(a, CALLBACK, REPEATED, MESSAGE,  modifications,     4) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TripModifications_CALLBACK pb_default_field_callback
#define transit_realtime_TripModifications_DEFAULT NULL
#define transit_realtime_TripModifications_selected_trips_MSGTYPE transit_realtime_TripModifications_SelectedTrips
#define transit_realtime_TripModifications_modifications_MSGTYPE transit_realtime_TripModifications_Modification

#define transit_realtime_TripModifications_Modification_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  start_stop_selector,   1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  end_stop_selector,   2) \
X(a, STATIC,   OPTIONAL, INT32,    propagated_modification_delay,   3) \
X(a, CALLBACK, REPEATED, MESSAGE,  replacement_stops,   4) \
X(a, CALLBACK, OPTIONAL, STRING,   service_alert_id,   5) \
X(a, STATIC,   OPTIONAL, UINT64,   last_modified_time,   6) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TripModifications_Modification_CALLBACK pb_default_field_callback
#define transit_realtime_TripModifications_Modification_DEFAULT (const pb_byte_t*)"\x18\x00\x00"
#define transit_realtime_TripModifications_Modification_start_stop_selector_MSGTYPE transit_realtime_StopSelector
#define transit_realtime_TripModifications_Modification_end_stop_selector_MSGTYPE transit_realtime_StopSelector
#define transit_realtime_TripModifications_Modification_replacement_stops_MSGTYPE transit_realtime_ReplacementStop

#define transit_realtime_TripModifications_SelectedTrips_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, STRING,   trip_ids,          1) \
X(a, CALLBACK, OPTIONAL, STRING,   shape_id,          2) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_TripModifications_SelectedTrips_CALLBACK pb_default_field_callback
#define transit_realtime_TripModifications_SelectedTrips_DEFAULT NULL

#define transit_realtime_StopSelector_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, UINT32,   stop_sequence,     1) \
X(a, CALLBACK, OPTIONAL, STRING,   stop_id,           2) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_StopSelector_CALLBACK pb_default_field_callback
#define transit_realtime_StopSelector_DEFAULT NULL

#define transit_realtime_ReplacementStop_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, INT32,    travel_time_to_stop,   1) \
X(a, CALLBACK, OPTIONAL, STRING,   stop_id,           2) \
X(a, CALLBACK, OPTIONAL, EXTENSION, extensions,      1000)
#define transit_realtime_ReplacementStop_CALLBACK pb_default_field_callback
#define transit_realtime_ReplacementStop_DEFAULT NULL

extern const pb_msgdesc_t transit_realtime_FeedMessage_msg;
extern const pb_msgdesc_t transit_realtime_FeedHeader_msg;
extern const pb_msgdesc_t transit_realtime_FeedEntity_msg;
extern const pb_msgdesc_t transit_realtime_TripUpdate_msg;
extern const pb_msgdesc_t transit_realtime_TripUpdate_StopTimeEvent_msg;
extern const pb_msgdesc_t transit_realtime_TripUpdate_StopTimeUpdate_msg;
extern const pb_msgdesc_t transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_msg;
extern const pb_msgdesc_t transit_realtime_TripUpdate_TripProperties_msg;
extern const pb_msgdesc_t transit_realtime_VehiclePosition_msg;
extern const pb_msgdesc_t transit_realtime_VehiclePosition_CarriageDetails_msg;
extern const pb_msgdesc_t transit_realtime_Alert_msg;
extern const pb_msgdesc_t transit_realtime_TimeRange_msg;
extern const pb_msgdesc_t transit_realtime_Position_msg;
extern const pb_msgdesc_t transit_realtime_TripDescriptor_msg;
extern const pb_msgdesc_t transit_realtime_TripDescriptor_ModifiedTripSelector_msg;
extern const pb_msgdesc_t transit_realtime_VehicleDescriptor_msg;
extern const pb_msgdesc_t transit_realtime_EntitySelector_msg;
extern const pb_msgdesc_t transit_realtime_TranslatedString_msg;
extern const pb_msgdesc_t transit_realtime_TranslatedString_Translation_msg;
extern const pb_msgdesc_t transit_realtime_TranslatedImage_msg;
extern const pb_msgdesc_t transit_realtime_TranslatedImage_LocalizedImage_msg;
extern const pb_msgdesc_t transit_realtime_Shape_msg;
extern const pb_msgdesc_t transit_realtime_Stop_msg;
extern const pb_msgdesc_t transit_realtime_TripModifications_msg;
extern const pb_msgdesc_t transit_realtime_TripModifications_Modification_msg;
extern const pb_msgdesc_t transit_realtime_TripModifications_SelectedTrips_msg;
extern const pb_msgdesc_t transit_realtime_StopSelector_msg;
extern const pb_msgdesc_t transit_realtime_ReplacementStop_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define transit_realtime_FeedMessage_fields &transit_realtime_FeedMessage_msg
#define transit_realtime_FeedHeader_fields &transit_realtime_FeedHeader_msg
#define transit_realtime_FeedEntity_fields &transit_realtime_FeedEntity_msg
#define transit_realtime_TripUpdate_fields &transit_realtime_TripUpdate_msg
#define transit_realtime_TripUpdate_StopTimeEvent_fields &transit_realtime_TripUpdate_StopTimeEvent_msg
#define transit_realtime_TripUpdate_StopTimeUpdate_fields &transit_realtime_TripUpdate_StopTimeUpdate_msg
#define transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_fields &transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_msg
#define transit_realtime_TripUpdate_TripProperties_fields &transit_realtime_TripUpdate_TripProperties_msg
#define transit_realtime_VehiclePosition_fields &transit_realtime_VehiclePosition_msg
#define transit_realtime_VehiclePosition_CarriageDetails_fields &transit_realtime_VehiclePosition_CarriageDetails_msg
#define transit_realtime_Alert_fields &transit_realtime_Alert_msg
#define transit_realtime_TimeRange_fields &transit_realtime_TimeRange_msg
#define transit_realtime_Position_fields &transit_realtime_Position_msg
#define transit_realtime_TripDescriptor_fields &transit_realtime_TripDescriptor_msg
#define transit_realtime_TripDescriptor_ModifiedTripSelector_fields &transit_realtime_TripDescriptor_ModifiedTripSelector_msg
#define transit_realtime_VehicleDescriptor_fields &transit_realtime_VehicleDescriptor_msg
#define transit_realtime_EntitySelector_fields &transit_realtime_EntitySelector_msg
#define transit_realtime_TranslatedString_fields &transit_realtime_TranslatedString_msg
#define transit_realtime_TranslatedString_Translation_fields &transit_realtime_TranslatedString_Translation_msg
#define transit_realtime_TranslatedImage_fields &transit_realtime_TranslatedImage_msg
#define transit_realtime_TranslatedImage_LocalizedImage_fields &transit_realtime_TranslatedImage_LocalizedImage_msg
#define transit_realtime_Shape_fields &transit_realtime_Shape_msg
#define transit_realtime_Stop_fields &transit_realtime_Stop_msg
#define transit_realtime_TripModifications_fields &transit_realtime_TripModifications_msg
#define transit_realtime_TripModifications_Modification_fields &transit_realtime_TripModifications_Modification_msg
#define transit_realtime_TripModifications_SelectedTrips_fields &transit_realtime_TripModifications_SelectedTrips_msg
#define transit_realtime_StopSelector_fields &transit_realtime_StopSelector_msg
#define transit_realtime_ReplacementStop_fields &transit_realtime_ReplacementStop_msg

/* Maximum encoded size of messages (where known) */
/* transit_realtime_FeedMessage_size depends on runtime parameters */
/* transit_realtime_FeedHeader_size depends on runtime parameters */
/* transit_realtime_FeedEntity_size depends on runtime parameters */
/* transit_realtime_TripUpdate_size depends on runtime parameters */
/* transit_realtime_TripUpdate_StopTimeUpdate_size depends on runtime parameters */
/* transit_realtime_TripUpdate_StopTimeUpdate_StopTimeProperties_size depends on runtime parameters */
/* transit_realtime_TripUpdate_TripProperties_size depends on runtime parameters */
/* transit_realtime_VehiclePosition_size depends on runtime parameters */
/* transit_realtime_VehiclePosition_CarriageDetails_size depends on runtime parameters */
/* transit_realtime_Alert_size depends on runtime parameters */
/* transit_realtime_TripDescriptor_size depends on runtime parameters */
/* transit_realtime_TripDescriptor_ModifiedTripSelector_size depends on runtime parameters */
/* transit_realtime_VehicleDescriptor_size depends on runtime parameters */
/* transit_realtime_EntitySelector_size depends on runtime parameters */
/* transit_realtime_TranslatedString_size depends on runtime parameters */
/* transit_realtime_TranslatedString_Translation_size depends on runtime parameters */
/* transit_realtime_TranslatedImage_size depends on runtime parameters */
/* transit_realtime_TranslatedImage_LocalizedImage_size depends on runtime parameters */
/* transit_realtime_Shape_size depends on runtime parameters */
/* transit_realtime_Stop_size depends on runtime parameters */
/* transit_realtime_TripModifications_size depends on runtime parameters */
/* transit_realtime_TripModifications_Modification_size depends on runtime parameters */
/* transit_realtime_TripModifications_SelectedTrips_size depends on runtime parameters */
/* transit_realtime_StopSelector_size depends on runtime parameters */
/* transit_realtime_ReplacementStop_size depends on runtime parameters */
#define TRANSIT_REALTIME_GTFS_REALTIME_PB_H_MAX_SIZE transit_realtime_TripUpdate_StopTimeEvent_size
#define transit_realtime_Position_size           29
#define transit_realtime_TimeRange_size          22
#define transit_realtime_TripUpdate_StopTimeEvent_size 33

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
